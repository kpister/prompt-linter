Attempt 1 made.
Rate Limit Error: on endpoint https://gsl-azoai-3.openai.azure.com/
Error code: 429 - {'error': {'code': '429', 'message': 'Rate limit is exceeded. Try again in 4 seconds.'}}
Rate Limit Error: on endpoint https://gsl-azoai-4.openai.azure.com/
Error code: 429 - {'error': {'code': '429', 'message': 'Rate limit is exceeded. Try again in 3 seconds.'}}
Rate Limit Error: on endpoint https://gsl-azoai-8.openai.azure.com/
Error code: 429 - {'error': {'code': '429', 'message': 'Rate limit is exceeded. Try again in 4 seconds.'}}
Rate Limit Error: on endpoint https://gsl-azoai-9.openai.azure.com/
Error code: 429 - {'error': {'code': '429', 'message': 'Rate limit is exceeded. Try again in 56 seconds.'}}
Rate Limit Error: on endpoint https://gsl-azoai-1.openai.azure.com/
Error code: 429 - {'error': {'code': '429', 'message': 'Rate limit is exceeded. Try again in 56 seconds.'}}
Rate Limit Error: on endpoint https://gsl-azoai-2.openai.azure.com/
Error code: 429 - {'error': {'code': '429', 'message': 'Rate limit is exceeded. Try again in 56 seconds.'}}
Rate Limit Error: on endpoint https://gsl-azoai-3.openai.azure.com/
Error code: 429 - {'error': {'code': '429', 'message': 'Rate limit is exceeded. Try again in 56 seconds.'}}
Rate Limit Error: on endpoint https://gsl-azoai-4.openai.azure.com/
Error code: 429 - {'error': {'code': '429', 'message': 'Rate limit is exceeded. Try again in 56 seconds.'}}
Rate Limit Error: on endpoint https://gsl-azoai-8.openai.azure.com/
Error code: 429 - {'error': {'code': '429', 'message': 'Rate limit is exceeded. Try again in 56 seconds.'}}
Rate Limit Error: on endpoint https://gsl-azoai-9.openai.azure.com/
Error code: 429 - {'error': {'code': '429', 'message': 'Rate limit is exceeded. Try again in 56 seconds.'}}
Rate Limit Error: on endpoint https://gsl-azoai-1.openai.azure.com/
Error code: 429 - {'error': {'code': '429', 'message': 'Rate limit is exceeded. Try again in 56 seconds.'}}
Rate Limit Error: on endpoint https://gsl-azoai-2.openai.azure.com/
Error code: 429 - {'error': {'code': '429', 'message': 'Rate limit is exceeded. Try again in 56 seconds.'}}
Rate Limit Error: on endpoint https://gsl-azoai-3.openai.azure.com/
Error code: 429 - {'error': {'code': '429', 'message': 'Rate limit is exceeded. Try again in 56 seconds.'}}
Rate Limit Error: on endpoint https://gsl-azoai-4.openai.azure.com/
Error code: 429 - {'error': {'code': '429', 'message': 'Rate limit is exceeded. Try again in 56 seconds.'}}
Rate Limit Error: on endpoint https://gsl-azoai-8.openai.azure.com/
Error code: 429 - {'error': {'code': '429', 'message': 'Rate limit is exceeded. Try again in 56 seconds.'}}
Rate Limit Error: on endpoint https://gsl-azoai-9.openai.azure.com/
Error code: 429 - {'error': {'code': '429', 'message': 'Rate limit is exceeded. Try again in 56 seconds.'}}
Rate Limit Error: on endpoint https://gsl-azoai-1.openai.azure.com/
Error code: 429 - {'error': {'code': '429', 'message': 'Rate limit is exceeded. Try again in 56 seconds.'}}
Rate Limit Error: on endpoint https://gsl-azoai-2.openai.azure.com/
Error code: 429 - {'error': {'code': '429', 'message': 'Rate limit is exceeded. Try again in 56 seconds.'}}
Rate Limit Error: on endpoint https://gsl-azoai-3.openai.azure.com/
Error code: 429 - {'error': {'code': '429', 'message': 'Rate limit is exceeded. Try again in 56 seconds.'}}
Rate Limit Error: on endpoint https://gsl-azoai-4.openai.azure.com/
Error code: 429 - {'error': {'code': '429', 'message': 'Rate limit is exceeded. Try again in 56 seconds.'}}
Rate Limit Error: on endpoint https://gsl-azoai-8.openai.azure.com/
Error code: 429 - {'error': {'code': '429', 'message': 'Rate limit is exceeded. Try again in 56 seconds.'}}
Rate Limit Error: on endpoint https://gsl-azoai-9.openai.azure.com/
Error code: 429 - {'error': {'code': '429', 'message': 'Rate limit is exceeded. Try again in 56 seconds.'}}
Rate Limit Error: on endpoint https://gsl-azoai-1.openai.azure.com/
Error code: 429 - {'error': {'code': '429', 'message': 'Rate limit is exceeded. Try again in 56 seconds.'}}
Rate Limit Error: on endpoint https://gsl-azoai-2.openai.azure.com/
Error code: 429 - {'error': {'code': '429', 'message': 'Rate limit is exceeded. Try again in 56 seconds.'}}
Rate Limit Error: on endpoint https://gsl-azoai-3.openai.azure.com/
Error code: 429 - {'error': {'code': '429', 'message': 'Rate limit is exceeded. Try again in 56 seconds.'}}
Rate Limit Error: on endpoint https://gsl-azoai-4.openai.azure.com/
Error code: 429 - {'error': {'code': '429', 'message': 'Rate limit is exceeded. Try again in 55 seconds.'}}
Rate Limit Error: on endpoint https://gsl-azoai-8.openai.azure.com/
Error code: 429 - {'error': {'code': '429', 'message': 'Rate limit is exceeded. Try again in 55 seconds.'}}
Rate Limit Error: on endpoint https://gsl-azoai-9.openai.azure.com/
Error code: 429 - {'error': {'code': '429', 'message': 'Rate limit is exceeded. Try again in 55 seconds.'}}
<BEGIN_TEXT>
def find_greatest_product(nums):
    n = len(nums)
    max_product = float('-inf')
    for i in range(n):
        for j in range(i+1, n):
            if nums[i] * nums[j] > max_product:
                max_product = nums[i] * nums[j]
    return max_product
<END_TEXT>
<BEGIN_RESPONSE>
We can reduce the cognitive complexity of this code by eliminating the nested loops and using Python's built-in functions to streamline the solution. Here's a refactored version:

```python
from itertools import combinations
from functools import reduce
from operator import mul

def find_greatest_product(nums):
    return max(reduce(mul, pair) for pair in combinations(nums, 2))

# Example usage:
# nums = [10, 20, 3, 40, 5]
# print(find_greatest_product(nums))  # Output will be 800 (40 * 20)
```

This version uses `combinations` from `itertools` to generate all pairs and `reduce` with `mul` from `functools` and `operator` to calculate the product. Using these higher-level abstractions reduces the complexity and improves readability.
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
```
def process_schedule(schedule):
    results = []
    for item in schedule:
        if item['completed']:
            results.append(item['name'])
        else:
            for sub_item in item['sub_tasks']:
                if sub_item['completed']:
                    results.append(sub_item['name'])
    return results
```
<END_TEXT>
<BEGIN_RESPONSE>
```
def process_schedule(schedule):
    results = []
    def add_completed_tasks(task_list):
        for task in task_list:
            if task['completed']:
                results.append(task['name'])
    
    for item in schedule:
        add_completed_tasks([item])
        add_completed_tasks(item.get('sub_tasks', []))

    return results
```
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code {TEXT} <END_PROMPT>

<BEGIN_TEXT> 
def calculate_commercial_bill(base_rate, usage, tax_rate, discount):
    if usage < 100:
        rate = base_rate * 0.9
    elif 100 <= usage < 500:
        rate = base_rate
    else:
        rate = base_rate * 1.2

    cost = rate * usage
    taxed_cost = cost * (1 + tax_rate)
    
    if discount:
        final_cost = taxed_cost * 0.85
    else:
        final_cost = taxed_cost

    return final_cost
<END_TEXT>

<BEGIN_RESPONSE> 
Reducing cognitive complexity can be akin to simplifying a multi-layered sandwich: you want each layer to added thoughtfully and complementing the others. The code focuses on calculating a commercial bill but provides its logic in a convoluted manner. Below is the refactored version broken down into clearer, more digestible steps:

```python
def calculate_rate(base_rate, usage):
    if usage < 100:
        return base_rate * 0.9
    elif usage < 500:
        return base_rate
    return base_rate * 1.2

def calculate_cost(rate, usage):
    return rate * usage

def add_tax(cost, tax_rate):
    return cost * (1 + tax_rate)

def apply_discount(cost, discount):
    return cost * 0.85 if discount else cost

def calculate_commercial_bill(base_rate, usage, tax_rate, discount):
    rate = calculate_rate(base_rate, usage)
    cost = calculate_cost(rate, usage)
    taxed_cost = add_tax(cost, tax_rate)
    final_cost = apply_discount(taxed_cost, discount)
    return final_cost
```

This refactored code breaks down the process into smaller, single-responsibility functions, making each layer of the calculation a bit more independent but complementing the ultimate goal.
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    if data is not None:
        filtered_data = []
        for item in data:
            if "value" in item:
                value = item["value"]
                if value > 10:
                    if value < 20:
                        filtered_data.append(value)
        if len(filtered_data) > 0:
            result = sum(filtered_data) / len(filtered_data)
        else:
            result = 0
    else:
        result = -1
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def is_valid(value):
        return 10 < value < 20

    if data is None:
        return -1

    filtered_data = [item["value"] for item in data if "value" in item and is_valid(item["value"])]

    return sum(filtered_data) / len(filtered_data) if filtered_data else 0
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    if data:
        result = []
        for item in data:
            if item % 2 == 0:
                result.append(item ** 2)
            else:
                if item < 10:
                    result.append(item + 10)
                else:
                    result.append(item - 5)
        return result
    return None
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    if not data:
        return None
    
    def transform(item):
        if item % 2 == 0:
            return item ** 2
        return item + 10 if item < 10 else item - 5
    
    return [transform(item) for item in data]
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def compute_values(a, b, c):
    r1 = None
    r2 = None
    if a > b:
        if c > 0:
            r1 = (a + b) / c
        else:
            if c == 0:
                raise ValueError("c cannot be zero")
            else:
                r1 = (a + b) * -1 / c
    else:
        if c > 0:
            r2 = (b - a) * c
        else:
            if c == 0:
                raise ValueError("c cannot be zero")
            else:
                r2 = (b - a) * -1 * c
    
    if r1 and r2:
        return max(r1, r2)
    elif r1:
        return r1
    elif r2:
        return r2
    else:
        return "No computation performed"
<END_TEXT>
<BEGIN_RESPONSE>
def compute_values(a, b, c):
    if c == 0:
        raise ValueError("c cannot be zero")

    if a > b:
        r1 = (a + b) / c if c > 0 else (a + b) * -1 / c
    else:
        r2 = (b - a) * c if c > 0 else (b - a) * -1 * c

    return max(r1, r2) if a > b else r2 if not a > b else r1

However, it is important to challenge whether all nested conditions are necessary. Could the logic or requirements of this function be redesigned to naturally minimize complexity, perhaps by separating concerns or breaking into simpler functions? Reducing cognitive complexity might over-simplify nuanced and critical checks that are necessary for correct behavior. Therefore, consider if simplification aligns with functional correctness.
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT> 

def is_leap_year(year):
    if year % 400 == 0:
        return True
    elif year % 100 == 0:
        return False
    else:
        if year % 4 == 0:
            return True
        else:
            return False

<END_TEXT>
<BEGIN_RESPONSE> 

def is_leap_year(year):
    # Could we try being a bit less dramatic here?
    if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:  
        # Congratulations, it's a leap!
        return True  
    # Oh dear, not a leap year.
    return False 

<END_RESPONSE>



## Query:
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    if not data:
        return None
    result = {}
    for item in data:
        if 'id' in item and 'value' in item:
            if item['id'] in result:
                result[item['id']].append(item['value'])
            else:
                result[item['id']] = [item['value']]
    return result
<END_TEXT>
<BEGIN_RESPONSE>
Here's a simplified version of the given code, reducing its cognitive complexity:

```python
def process_data(data):
    if not data:
        return None
    result = {}
    for item in data:
        result.setdefault(item.get('id'), []).append(item.get('value')) if 'id' in item and 'value' in item else None
    return result
```

Changes Made:
1. Removed nested if statements by using `setdefault` with the dictionary `result` to streamline dictionary value assignment.
2. Used the `get` method to access the dictionary keys safely.

The changes maintain the functionality of the original code while making it easier to read and maintain.
<END_RESPONSE>

<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    results = []
    for record in data:
        if record['is_valid']:
            processed_record = process_valid_record(record)
            results.append(processed_record)
        else:
            if record['error_code'] == 404:
                log_error(record, 'Not Found')
            elif record['error_code'] == 500:
                log_error(record, 'Server Error')
            else:
                log_error(record, 'Unknown Error')
    return results
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    results = []

    def check_and_log_errors(record):
        error_messages = {
            404: 'Not Found',
            500: 'Server Error'
        }
        error_message = error_messages.get(record['error_code'], 'Unknown Error')
        log_error(record, error_message)

    for record in data:
        if record['is_valid']:
            results.append(process_valid_record(record))
        else:
            check_and_log_errors(record)

    return results
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item.is_valid():
            transformed = transform(item)
            if transformed:
                result.append(transformed)
        else:
            if item.needs_logging():
                logger.log(item)
            else:
                continue
    return result

def transform(item):
    # Complex transformation logic not shown here
    pass

class logger:
    @staticmethod
    def log(item):
        print(f"Logging item: {item}")
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def handle_valid_item(item, result):
        transformed = transform(item)
        if transformed:
            result.append(transformed)

    def handle_invalid_item(item):
        if item.needs_logging():
            logger.log(item)

    result = []
    for item in data:
        if item.is_valid():
            handle_valid_item(item, result)
        else:
            handle_invalid_item(item)
    return result

def transform(item):
    # Complex transformation logic not shown here
    pass

class logger:
    @staticmethod
    def log(item):
        print(f"Logging item: {item}")
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code {TEXT} <END_PROMPT>
<BEGIN_TEXT>
def complex_calculation(values):
    result = 0
    for i in range(len(values)):
        if values[i] % 2 == 0:
            for j in range(i, len(values)):
                if values[j] % 5 == 0:
                    result += values[j] * values[i]
                elif values[j] % 3 == 0:
                    result -= values[j] + values[i]
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def complex_calculation(values):
    result = 0
    for i, val_i in enumerate(values):
        if val_i % 2 == 0:
            for val_j in values[i:]:
                if val_j % 5 == 0:
                    result += val_j * val_i
                elif val_j % 3 == 0:
                    result -= val_j + val_i
    return result
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>  
<BEGIN_TEXT>  
```
def process_orders(orders):
    processed_orders = []
    for order in orders:
        if order['status'] == 'delivered':
            processed_orders.append(order)
        elif order['status'] == 'pending' and order['priority'] == 'high':
            if check_inventory(order):
                processed_orders.append(process_order(order))
            else:
                notify_inventory_shortage(order)
        elif order['status'] == 'pending' and order['priority'] == 'low':
            if check_inventory(order):
                processed_orders.append(process_order(order))
            else:
                notify_inventory_shortage(order)
        elif order['status'] == 'cancelled':
            log_cancelled_order(order)
    return processed_orders
```  
<END_TEXT>  
<BEGIN_RESPONSE>  
One way to reduce the cognitive complexity of the provided code is to refactor it by removing redundancy and breaking it down into smaller functions. Here is a refactored version:

```
def process_orders(orders):
    processed_orders = []
    for order in orders:
        handle_order(order, processed_orders)
    return processed_orders

def handle_order(order, processed_orders):
    if order['status'] == 'delivered':
        processed_orders.append(order)
    elif order['status'] == 'pending':
        if handle_pending_order(order):
            processed_orders.append(process_order(order))
    elif order['status'] == 'cancelled':
        log_cancelled_order(order)

def handle_pending_order(order):
    if check_inventory(order):
        return True
    else:
        notify_inventory_shortage(order)
        return False
``` 

By splitting the logic into smaller functions, we have made the code easier to understand and maintain, thereby reducing its cognitive complexity.  
<END_RESPONSE>  
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            temp = item * 2
        else:
            temp = item + 1
        if temp > 10:
            result.append(temp)
    return result
</END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def transform(item):
        if item % 2 == 0:
            return item * 2
        else:
            return item + 1

    return [temp for item in data if (temp := transform(item)) > 10]
</END_RESPONSE>
Invalid response format.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def manage_orders(orders):
    result = []
    for order in orders:
        if order['status'] == 'pending':
            processed = process_order(order)
            if processed['eligible'] == True:
                if processed['amount'] > 100:
                    processed['shipping'] = 'free'
                else:
                    processed['shipping'] = 'standard'
            else:
                processed['error'] = 'Not eligible'
            result.append(processed)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def manage_orders(orders):
    result = []
    
    def determine_shipping(amount):
        return 'free' if amount > 100 else 'standard'

    def handle_order(order):
        if order['status'] != 'pending':
            return None
        
        processed = process_order(order)
        
        if not processed['eligible']:
            processed['error'] = 'Not eligible'
            return processed
        
        processed['shipping'] = determine_shipping(processed['amount'])
        return processed

    for order in orders:
        processed = handle_order(order)
        if processed is not None:
            result.append(processed)
    
    return result
<END_RESPONSE>
<BEGIN_TEXT>
public class Invoice {
    public double calculateTotal(InvoiceItems items) {
        double total = 0;
        for (Item item : items.getAllItems()) {
            if (item.getCategory() == Category.TAXABLE) {
                if (item.hasDiscount()) {
                    total += item.getPrice() * item.getDiscountRate() * 1.1; // tax rate 10%
                } else {
                    total += item.getPrice() * 1.1; // tax rate 10%
                }
            } else if (item.getCategory() == Category.NON_TAXABLE) {
                if (item.hasDiscount()) {
                    total += item.getPrice() * item.getDiscountRate();
                } else {
                    total += item.getPrice();
                }
            } else if (item.getCategory() == Category.SPECIAL) {
                if (item.hasDiscount()) {
                    total += item.getPrice() * item.getDiscountRate() * 1.05; // tax rate 5%
                } else {
                    total += item.getPrice() * 1.05; // tax rate 5%
                }
            }
        }
        return total;
    }
}

class InvoiceItems {
    private List<Item> items;
    
    public InvoiceItems(List<Item> items) {
        this.items = items;
    }
    
    public List<Item> getAllItems() {
        return items;
    }
}

class Item {
    private double price;
    private double discountRate;
    private Category category;
    
    public Item(double price, double discountRate, Category category) {
        this.price = price;
        this.discountRate = discountRate;
        this.category = category;
    }
    
    public double getPrice() {
        return price;
    }
    
    public double getDiscountRate() {
        return discountRate;
    }
    
    public Category getCategory() {
        return category;
    }
    
    public boolean hasDiscount() {
        return discountRate < 1.0;
    }
}

enum Category {
    TAXABLE, NON_TAXABLE, SPECIAL;
}
<END_TEXT>

<BEGIN_RESPONSE>
public class Invoice {
    public double calculateTotal(InvoiceItems items) {
        double total = 0;
        for (Item item : items.getAllItems()) {
            double price = item.getPrice();
            if (item.hasDiscount()) {
                price *= item.getDiscountRate();
            }
            total += applyTax(price, item.getCategory());
        }
        return total;
    }

    private double applyTax(double price, Category category) {
        switch (category) {
            case TAXABLE:
                return price * 1.1; // tax rate 10%
            case NON_TAXABLE:
                return price;
            case SPECIAL:
                return price * 1.05; // tax rate 5%
            default:
                throw new IllegalArgumentException("Unknown category: " + category);
        }
    }
}

class InvoiceItems {
    private List<Item> items;
    
    public InvoiceItems(List<Item> items) {
        this.items = items;
    }
    
    public List<Item> getAllItems() {
        return items;
    }
}

class Item {
    private double price;
    private double discountRate;
    private Category category;
    
    public Item(double price, double discountRate, Category category) {
        this.price = price;
        this.discountRate = discountRate;
        this.category = category;
    }
    
    public double getPrice() {
        return price;
    }
    
    public double getDiscountRate() {
        return discountRate;
    }
    
    public Category getCategory() {
        return category;
    }
    
    public boolean hasDiscount() {
        return discountRate < 1.0;
    }
}

enum Category {
    TAXABLE, NON_TAXABLE, SPECIAL;
}
<END_RESPONSE>

The provided code is simplified by first consolidating the discount logic within the main loop and then using a helper method to apply tax based on the item's category. This reduces redundancy, improves readability, and makes the code easier to maintain, thus addressing ethical considerations around code maintainability and enhancing the ease of understanding for other developers who may work on the code in the future.

<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def complex_function(data):
    results = []
    for item in data:
        if isinstance(item, int):
            if item % 2 == 0:
                results.append(item * 2)
            else:
                results.append(item * 3)
        elif isinstance(item, str):
            results.append(item.upper())
        elif isinstance(item, list):
            sub_results = []
            for sub_item in item:
                if sub_item % 2 == 0:
                    sub_results.append(sub_item * 2)
                else:
                    sub_results.append(sub_item * 3)
            results.append(sub_results)
    return results
<END_TEXT>
<BEGIN_RESPONSE>
def process_item(item):
    if isinstance(item, int):
        return item * 2 if item % 2 == 0 else item * 3
    elif isinstance(item, str):
        return item.upper()
    elif isinstance(item, list):
        return [process_item(sub_item) for sub_item in item]

def complex_function(data):
    return [process_item(item) for item in data]
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    output = []
    for item in data:
        if item % 2 == 0:
            output.append(item * 2)
        else:
            output.append(item * 3)
    return output

# Example usage
data = [1, 2, 3, 4, 5, 6]
result = process_data(data)
print(result)
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    return [(item * 2 if item % 2 == 0 else item * 3) for item in data]

# Example usage
data = [1, 2, 3, 4, 5, 6]
result = process_data(data)
print(result)
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code {TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(items):
    result = []
    for item in items:
        if item.is_valid():
            processed = item.process()
            if processed.is_success():
                result.append(processed)
                log_success(processed)
            else:
                log_failure(processed)
        else:
            log_error(item)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(items):
    result = []
    for item in items:
        if not item.is_valid():
            log_error(item)
            continue
        
        processed = item.process()
        if processed.is_success():
            result.append(processed)
            log_success(processed)
        else:
            log_failure(processed)
    
    return result
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code {TEXT} <END_PROMPT>
<BEGIN_TEXT> 
def manage_traffic_lights(color, pedestrian_button_pressed):
    if color == 'red':
        if pedestrian_button_pressed:
            if not pedestrian_waiting:
                pedestrian_waiting = True
                print("Pedestrian waiting...")
            if pedestrian_waiting and time_elapsed > 30:
                pedestrian_cross = True
                print("Pedestrian crossing...")
        else:
            print("Cars must stop!")
    elif color == 'green':
        if pedestrian_waiting:
            if time_elapsed < 30:
                print("Cars may go, but watch for pedestrians!")
        else:
            print("Cars may go!")
    elif color == 'yellow':
        if not pedestrian_waiting:
            print("Caution: Light is changing soon.")
        else:
            if pedestrian_cross:
                print("Pedestrian crossing, cars be cautious.")
    else:
        print("Traffic light malfunction! Everyone, please play nice and be careful.")
<END_TEXT>
<BEGIN_RESPONSE> 
def manage_traffic_lights(color, pedestrian_button_pressed):
    if color == 'red':
        handle_red_light(pedestrian_button_pressed)
    elif color == 'green':
        handle_green_light()
    elif color == 'yellow':
        handle_yellow_light()
    else:
        print("Traffic light malfunction! Everyone, please play nice and be careful.")

def handle_red_light(pedestrian_button_pressed):
    if pedestrian_button_pressed and not pedestrian_waiting:
        pedestrian_waiting = True
        print("Pedestrian waiting...")
    if pedestrian_waiting and time_elapsed > 30:
        pedestrian_cross = True
        print("Pedestrian crossing...")
    else:
        print("Cars must stop!")

def handle_green_light():
    if pedestrian_waiting and time_elapsed < 30:
        print("Cars may go, but watch for pedestrians!")
    else:
        print("Cars may go!")

def handle_yellow_light():
    if pedestrian_cross:
        print("Pedestrian crossing, cars be cautious.")
    else:
        print("Caution: Light is changing soon.")
<END_RESPONSE>
<BEGIN_TEXT>
def add(a, b):
    if isinstance(a, int) and isinstance(b, int):
        return a + b
    else:
        return "Inputs must be integers"

numbers = [1, 2, 3, 4, 5]
result = 0
for number in numbers:
    if isinstance(number, int):
        result = add(result, number)
print("Sum of integers:", result)
<END_TEXT>

<BEGIN_RESPONSE>
def add(a, b):
    return a + b

numbers = [1, 2, 3, 4, 5]
result = sum(numbers)
print("Sum of integers:", result)
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for record in data:
        if record['type'] == 'A':
            processed = record['value'] * 1.1
        elif record['type'] == 'B':
            processed = record['value'] * 1.2
        elif record['type'] == 'C':
            processed = record['value'] * 1.3
        elif record['type'] == 'D':
            processed = record['value'] * 1.4
        else:
            processed = record['value']
        result.append(processed)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    type_multiplier = {
        'A': 1.1,
        'B': 1.2,
        'C': 1.3,
        'D': 1.4
    }
    
    result = []
    for record in data:
        multiplier = type_multiplier.get(record['type'], 1)
        processed = record['value'] * multiplier
        result.append(processed)
        
    return result
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_items(items):
    result = []
    for item in items:
        if item > 10:
            result.append(item * 2)
        else:
            if item > 5:
                result.append(item + 5)
            else:
                result.append(item)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
To reduce the cognitive complexity of the given code, we should aim to minimize nested conditions and make each step of the process more clear and straightforward. Here is a refactored version:

```python
def process_items(items):
    def process_item(item):
        if item > 10:
            return item * 2
        elif item > 5:
            return item + 5
        else:
            return item

    return [process_item(item) for item in items]
```

In this refactored code, we isolate the logic for processing each item into a separate function `process_item`. This helps in clearly defining the transformation for each item and reduces nested conditional statements. We also leverage list comprehension to make the main `process_items` function more concise and readable.
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    filtered = []
    for item in data:
        if item.is_valid():
            transformed = item.transform()
            if transformed.is_not_empty():
                filtered.append(transformed)
    result = compute_final(filtered)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
To reduce the cognitive complexity of the given code, the logic can be separated into smaller, more manageable functions with clear responsibilities. Here is a refactored version:

```python
def process_data(data):
    def filter_and_transform(item):
        if item.is_valid():
            transformed = item.transform()
            if transformed.is_not_empty():
                return transformed
        return None
    
    filtered = [filter_and_transform(item) for item in data if filter_and_transform(item)]
    return compute_final(filtered)
```

By breaking down the operations into a separate function (`filter_and_transform`), the overall readability and maintainability of the code are improved. The main function now focuses only on the higher-level process.
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
```python
def process_data(data):
    result = []
    for item in data:
        if isinstance(item, int):
            if item % 2 == 0:
                result.append(item * 2)
            else:
                result.append(item * 3)
        elif isinstance(item, str):
            if item.isdigit():
                number = int(item)
                if number % 2 == 0:
                    result.append(number * 2)
                else:
                    result.append(number * 3)
            else:
                result.append(item.upper())
    return result
```
<END_TEXT>
<BEGIN_RESPONSE>
```python
def process_data(data):
    result = []
    
    def process_int(item):
        return item * 2 if item % 2 == 0 else item * 3

    def process_str(item):
        if item.isdigit():
            number = int(item)
            return number * 2 if number % 2 == 0 else number * 3
        return item.upper()

    for item in data:
        if isinstance(item, int):
            result.append(process_int(item))
        elif isinstance(item, str):
            result.append(process_str(item))
    
    return result
```
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
# Python Code that calculates the Fibonacci sequence up to n numbers and also logs the time taken for computation
import time

def fibonacci(n):
    start_time = time.time()
    fib_sequence = [0, 1]
    if n <= 0:
        return []
    if n == 1:
        return [0]
    for i in range(2, n):
        next_number = fib_sequence[i - 1] + fib_sequence[i - 2]
        fib_sequence.append(next_number)
    end_time = time.time()
    print(f"Time taken for computation: {end_time - start_time} seconds")
    return fib_sequence

print(fibonacci(10))
<END_TEXT>
<BEGIN_RESPONSE>
# Just like organizing a kitchen can reduce chaos and improve efficiency, simplifying this code can significantly improve its readability and maintenance. Here's a more organized and less complex version of the Fibonacci sequence calculation using Python:

import time

def compute_fibonacci_sequence(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    
    fib_sequence = [0, 1]
    for i in range(2, n):
        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])
    return fib_sequence

def fibonacci(n):
    start_time = time.time()
    sequence = compute_fibonacci_sequence(n)
    elapsed_time = time.time() - start_time
    print(f"Time taken for computation: {elapsed_time} seconds")
    return sequence

print(fibonacci(10))

# Explanation:
# - The calculation of the Fibonacci sequence is isolated into a separate function `compute_fibonacci_sequence`.
# - This separation makes the main function `fibonacci` cleaner and the code easier to understand.
# - Simplified the `for` loop by using `fib_sequence[-1]` and `fib_sequence[-2]` to directly access the last two elements.
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code <BEGIN_TEXT> def calculate_total(items):
    total = 0
    for item in items:
        if item.category == 'A':
            total += item.price * 0.9
        elif item.category == 'B':
            total += item.price * 0.85
        elif item.category == 'C':
            total += item.price * 0.8
        else:
            total += item.price
    return total <END_TEXT> <END_PROMPT>
<BEGIN_RESPONSE> By leveraging a strategy similar to a well-organized library catalog that minimizes the effort needed to locate a book, we can simplify the provided code to reduce cognitive load. Here's a refactored version:

```python
def calculate_total(items):
    discounts = {
        'A': 0.9,
        'B': 0.85,
        'C': 0.8
    }
    
    total = 0
    for item in items:
        discount = discounts.get(item.category, 1)
        total += item.price * discount
    return total
```

This approach uses a dictionary to map categories to their corresponding discount rates, which reduces the number of conditional checks and makes the code easier to read and maintain. The `get` method provides a default discount of 1 (no discount) for any category not explicitly listed.
Invalid response format.
## Example Format:
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if 'value' in item:
            if item['value'] > 10:
                result.append(item['value'] * 2)
            else:
                result.append(item['value'] + 2)
        else:
            result.append(0)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    result = []
    for item in data:
        value = item.get('value', 0)
        if value > 10:
            result.append(value * 2)
        else:
            result.append(value + 2)
    return result
<END_RESPONSE>

Here's an example of a real-world scenario:

<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def calculate_discounts(orders):
    discounts = []
    for order in orders:
        if order['customer_type'] == 'VIP':
            if order['total'] > 100:
                discount = order['total'] * 0.20
            else:
                discount = order['total'] * 0.10
        else:
            if order['total'] > 50:
                discount = order['total'] * 0.05
            else:
                discount = order['total'] * 0.02
        discounts.append(discount)
    return discounts
<END_TEXT>
<BEGIN_RESPONSE>
def calculate_discounts(orders):
    discounts = []
    for order in orders:
        if order['customer_type'] == 'VIP':
            discount_rate = 0.20 if order['total'] > 100 else 0.10
        else:
            discount_rate = 0.05 if order['total'] > 50 else 0.02
        discounts.append(order['total'] * discount_rate)
    return discounts
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
function processOrders(orders) {
  for (let i = 0; i < orders.length; i++) {
    if (orders[i].status === 'shipped') {
      if (orders[i].dateShipped < Date.now() - 7 * 24 * 60 * 60 * 1000) {
        orders[i].status = 'delivered';
      }
    }
  }
  return orders.filter(order => order.status === 'delivered');
}
<END_TEXT>
<BEGIN_RESPONSE>
function processOrders(orders) {
  const oneWeekAgo = Date.now() - 7 * 24 * 60 * 60 * 1000;

  return orders.map(order => {
    if (order.status === 'shipped' && order.dateShipped < oneWeekAgo) {
      order.status = 'delivered';
    }
    return order;
  }).filter(order => order.status === 'delivered');
}
<END_RESPONSE>

---

*Ethical Considerations Addressed:*

1. **Code Readability and Maintainability**: The provided synthetic data focuses on improving the readability and maintainability of the code. This is ethically important because it makes it easier for other developers and stakeholders to understand and modify the code, reducing the likelihood of errors and improving overall software quality.

2. **Balanced Complexity**: By reducing cognitive complexity, the generated response avoids oversimplification that could lead to misunderstandings or introduce new bugs. Ethical coding practices mandate balance to ensure the software remains both functional and easy to understand.

3. **Security and Compliance**: The response maintains the original functionality, including the handling of date operations and order statuses. Ethical considerations include maintaining data integrity and ensuring that changes do not introduce vulnerabilities or non-compliance with business requirements.

4. **Privacy and Confidentiality**: The synthetic data does not include any real user data or sensitive information, thereby respecting user privacy and confidentiality. This aligns with ethical guidelines on preventing data leaks or misuse.
<BEGIN_TEXT>
def process_data(data):
    results = []
    for i in range(len(data)):
        if data[i] % 2 == 0:
            doubled = data[i] * 2
            results.append(doubled)
        else:
            tripled = data[i] * 3
            results.append(tripled)
    return results
<END_TEXT>
<BEGIN_RESPONSE>
While the prompt aims to reduce the cognitive complexity of the code, one could argue that this approach might introduce oversimplifications or overlook the importance of explicitness in coding. The original code is straightforward and easy to understand:

```python
def process_data(data):
    results = []
    for i in range(len(data)):
        if data[i] % 2 == 0:
            doubled = data[i] * 2
            results.append(doubled)
        else:
            tripled = data[i] * 3
            results.append(tripled)
    return results
```

Any attempt to reduce its complexity might actually reduce its readability and explicitness. For instance, refactoring it into a list comprehension or other more "compact" forms might make the logic less transparent to some readers. Here is a possible refactor:

```python
def process_data(data):
    return [(x * 2 if x % 2 == 0 else x * 3) for x in data]
```

While this version is more concise, it could be argued that the original provided clearer step-by-step logic, which might be more beneficial for maintaining or debugging the code in the future.
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            if item > 50:
                result.append(item * 2)
            else:
                result.append(item)
        else:
            if item < 30:
                result.append(item + 5)
            else:
                result.append(item)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def process_even(item):
        return item * 2 if item > 50 else item

    def process_odd(item):
        return item + 5 if item < 30 else item

    return [process_even(item) if item % 2 == 0 else process_odd(item) for item in data]
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def cook_dinner(ingredients):
    if 'chicken' in ingredients:
        if 'oil' in ingredients:
            if 'spices' in ingredients:
                print("Cooking spicy chicken.")
            else:
                print("Cooking bland chicken.")
        else:
            if 'spices' in ingredients:
                print("Cooking grilled chicken with spices.")
            else:
                print("Cooking plain grilled chicken.")
    elif 'vegetables' in ingredients:
        if 'oil' in ingredients:
            if 'spices' in ingredients:
                print("Cooking spicy veggies.")
            else:
                print("Cooking bland veggies.")
        else:
            if 'spices' in ingredients:
                print("Cooking steamed veggies with spices.")
            else:
                print("Cooking plain steamed veggies.")
    else:
        print("Ordering pizza.")
<END_TEXT>
<BEGIN_RESPONSE>
"Reduce the cognitive complexity of the following code"

Sure thing, Master Chef! Here’s a simplified menu:

```python
def cook_dinner(ingredients):
    def cook_meal(main, method, flavor):
        print(f"Cooking {flavor} {method} {main}.")

    if 'chicken' in ingredients:
        main = 'chicken'
    elif 'vegetables' in ingredients:
        main = 'veggies'
    else:
        print("Ordering pizza.")
        return

    method = 'grilled' if 'oil' not in ingredients else 'spicy' if 'spices' in ingredients else 'bland'
    flavor = 'with spices' if 'spices' in ingredients else ''
    
    cook_meal(main, method, flavor)
```

Voilà! Your kitchen just got a whole lot less chaotic. Or did it? 😜
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_orders(orders):
    for order in orders:
        if order['status'] == 'pending':
            if order['payment'] == 'completed':
                if order['inventory'] == 'available':
                    process_order(order)
                else:
                    notify_inventory(order)
            else:
                notify_payment(order)
        else:
            notify_status(order)

def process_order(order):
    print(f"Processing order {order['id']}")

def notify_inventory(order):
    print(f"Inventory not available for order {order['id']}")

def notify_payment(order):
    print(f"Payment not completed for order {order['id']}")

def notify_status(order):
    print(f"Order {order['id']} is not pending")
<END_TEXT>
<BEGIN_RESPONSE>
def process_orders(orders):
    for order in orders:
        if order['status'] != 'pending':
            notify_status(order)
            continue
        if order['payment'] != 'completed':
            notify_payment(order)
            continue
        if order['inventory'] != 'available':
            notify_inventory(order)
            continue
        process_order(order)

def process_order(order):
    print(f"Processing order {order['id']}")

def notify_inventory(order):
    print(f"Inventory not available for order {order['id']}")

def notify_payment(order):
    print(f"Payment not completed for order {order['id']}")

def notify_status(order):
    print(f"Order {order['id']} is not pending")
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(item * 2)
        else:
            if item % 3 == 0:
                result.append(item * 3)
            else:
                result.append(item)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def transform_item(item):
        if item % 2 == 0:
            return item * 2
        elif item % 3 == 0:
            return item * 3
        else:
            return item

    return [transform_item(item) for item in data]
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
function processData(data) {
    let result = [];
    for (let i = 0; i < data.length; i++) {
        if (data[i] % 2 === 0) {
            let squared = data[i] * data[i];
            if (squared > 100) {
                result.push(squared);
            }
        }
    }
    return result;
}
<END_TEXT>
<BEGIN_RESPONSE>
function processData(data) {
    return data
        .filter(num => num % 2 === 0)
        .map(num => num * num)
        .filter(squared => squared > 100);
}
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for i in range(len(data)):
        if data[i] % 2 == 0:
            value = data[i] ** 2
            if value > 100:
                result.append(value)
            else:
                result.append(0)
        else:
            value = data[i] ** 3
            if value < 50:
                result.append(value)
            else:
                result.append(1)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
The request to reduce cognitive complexity in code often aims to make the code more readable and maintainable. However, this suggestion can sometimes have unintended consequences, such as oversimplifying logic and losing important nuances. 

The provided code has a nested structure that explicitly checks for specific conditions and processes data accordingly. Each step is deliberate and the complexity is inherent to the logic being implemented. By attempting to reduce cognitive complexity, we might obscure the true intent of the code and make it harder to understand the specific transformations being applied to the data.

In this case, the code could be refactored to use more functions or perhaps to leverage list comprehensions, but it's crucial to strike a balance between readability and maintaining the explicit logical steps that make the code's functionality clear. Simplifying the code too much might lead to losing the explicit checks and the intended processing nuances, which could ultimately result in harder-to-debug code and potential bugs.

Here is a refactor that reduces cognitive complexity while attempting to keep the logic clear:
```python
def process_data(data):
    def process_even(value):
        return value ** 2 if value ** 2 > 100 else 0

    def process_odd(value):
        return value ** 3 if value ** 3 < 50 else 1

    return [process_even(d) if d % 2 == 0 else process_odd(d) for d in data]
```

While this refactor reduces the apparent complexity by introducing helper functions and a list comprehension, it’s essential to consider if this change truly makes the code more understandable for all potential readers.
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>

<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            square = item * item
            result.append(square)
        else:
            cube = item * item * item
            result.append(cube)
    return result
<END_TEXT>

<BEGIN_RESPONSE>
To reduce the cognitive complexity of this code, we can break down the logic within the loop into smaller, separate functions. This not only makes the code easier to read but also makes it easier to test and maintain.

```python
def process_data(data):
    def square_even(item):
        return item * item
    
    def cube_odd(item):
        return item * item * item

    result = []
    for item in data:
        if item % 2 == 0:
            result.append(square_even(item))
        else:
            result.append(cube_odd(item))
    return result
```

Here, `square_even` and `cube_odd` functions encapsulate the logic for squaring and cubing the items, respectively. This way, the main `process_data` function focuses only on iterating through the list and applying the appropriate transformation, thus reducing cognitive complexity.
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code {TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    for i in range(len(data)):
        if data[i] % 2 == 0:
            data[i] = data[i] ** 2
        else:
            data[i] = data[i] ** 3
    result = []
    for value in data:
        if value % 5 == 0:
            result.append(value)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
Sure! Here’s a simplified version that reduces cognitive complexity:

```python
def process_data(data):
    def transform(value):
        return value ** 2 if value % 2 == 0 else value ** 3
    
    transformed_data = [transform(value) for value in data]
    result = [value for value in transformed_data if value % 5 == 0]
    return result
```

- I created a helper function `transform` to handle the power transformation, which reduces the nested logic inside the loop.
- I used list comprehensions to both transform the data and filter the results, making the code more readable and concise.
<END_RESPONSE>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(item * 2)
        else:
            if item % 3 == 0:
                result.append(item * 3)
            else:
                result.append(item)
    return result
<END_TEXT>

<BEGIN_RESPONSE>
Sure! Here is a refactored version of your code with reduced cognitive complexity:

```python
def process_data(data):
    def process_item(item):
        if item % 2 == 0:
            return item * 2
        elif item % 3 == 0:
            return item * 3
        else:
            return item

    return [process_item(item) for item in data]
```

This version uses a helper function `process_item` to handle the logic for processing each item, and a list comprehension to simplify the iteration over `data`.
<END_RESPONSE>
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item > 0:
            if item % 2 == 0:
                result.append(item * 2)
            else:
                result.append(item + 1)
        else:
            if item % 2 == 0:
                result.append(item - 1)
            else:
                result.append(item * 3)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    result = []
    for item in data:
        if item > 0:
            result.append(item * 2 if item % 2 == 0 else item + 1)
        else:
            result.append(item - 1 if item % 2 == 0 else item * 3)
    return result
<END_RESPONSE>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if isinstance(item, dict):
            processed = {}
            for key, value in item.items():
                if isinstance(value, list):
                    processed[key] = [v * 2 for v in value if isinstance(v, int)]
                elif isinstance(value, int):
                    processed[key] = value * 2
                else:
                    processed[key] = value
            result.append(processed)
        elif isinstance(item, list):
            result.extend([i * 2 for i in item if isinstance(i, int)])
        elif isinstance(item, int):
            result.append(item * 2)
    return result
<END_TEXT>

<BEGIN_RESPONSE>
To reduce the cognitive complexity of the code, we can break it down into smaller functions and make the logic more readable. Here's a refactored version of the code:

```python
def process_dict(item):
    processed = {}
    for key, value in item.items():
        if isinstance(value, list):
            processed[key] = [v * 2 for v in value if isinstance(v, int)]
        elif isinstance(value, int):
            processed[key] = value * 2
        else:
            processed[key] = value
    return processed

def process_list(item_list):
    return [i * 2 for i in item_list if isinstance(i, int)]

def process_item(item):
    if isinstance(item, dict):
        return process_dict(item)
    elif isinstance(item, list):
        return process_list(item)
    elif isinstance(item, int):
        return item * 2
    return None

def process_data(data):
    result = []
    for item in data:
        processed_item = process_item(item)
        if processed_item is not None:
            if isinstance(processed_item, list):
                result.extend(processed_item)
            else:
                result.append(processed_item)
    return result
```

This refactored code separates the processing logic for dictionaries, lists, and individual items into separate functions. This makes the main `process_data` function easier to understand and maintain.
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if isinstance(item, dict):
            for key, value in item.items():
                if key == 'name' and isinstance(value, str):
                    result.append(value.upper())
        elif isinstance(item, list):
            for sub_item in item:
                if isinstance(sub_item, str):
                    result.append(sub_item.lower())
        else:
            if isinstance(item, str):
                result.append(item.capitalize())
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    result = []

    def process_dict(d):
        for key, value in d.items():
            if key == 'name' and isinstance(value, str):
                result.append(value.upper())

    def process_list(l):
        for sub_item in l:
            if isinstance(sub_item, str):
                result.append(sub_item.lower())

    def process_item(item):
        if isinstance(item, dict):
            process_dict(item)
        elif isinstance(item, list):
            process_list(item)
        elif isinstance(item, str):
            result.append(item.capitalize())

    for item in data:
        process_item(item)

    return result
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code {TEXT} <END_PROMPT>

<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            if item > 10:
                result.append(item * 2)
            else:
                result.append(item + 1)
        else:
            if item < 5:
                result.append(item - 1)
            else:
                result.append(item)
    return result
<END_TEXT>

<BEGIN_RESPONSE>
Here's a simplified version of the code that reduces cognitive complexity by eliminating nested if-else statements and using more straightforward logic:

```python
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(item * 2 if item > 10 else item + 1)
        else:
            result.append(item - 1 if item < 5 else item)
    return result
```

This version uses inline if-else expressions to streamline the logic, making the code easier to read and understand.
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(item * 2)
        else:
            result.append(item * 3)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
# Simplified version of the function to reduce cognitive complexity
def process_data(data):
    def transform(item):
        return item * 2 if item % 2 == 0 else item * 3

    return [transform(item) for item in data]
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if isinstance(item, dict):
            extracted = []
            for key, value in item.items():
                if key.startswith('a'):
                    extracted.append(value)
            if extracted:
                result.append(sum(extracted))
        elif isinstance(item, list):
            extracted = [x for x in item if x % 2 == 0]
            if extracted:
                result.append(sum(extracted))
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def extract_and_sum(container, condition):
        extracted = [value for key, value in container.items() if condition(key)] if isinstance(container, dict) else [x for x in container if condition(x)]
        return sum(extracted) if extracted else None
    
    result = []
    for item in data:
        if isinstance(item, dict):
            summed = extract_and_sum(item, lambda x: x.startswith('a'))
        elif isinstance(item, list):
            summed = extract_and_sum(item, lambda x: x % 2 == 0)
        if summed is not None:
            result.append(summed)
    return result
<END_RESPONSE>
<BEGIN_TEXT>
function processData(data) {
    let result = [];
    for (let i = 0; i < data.length; i++) {
        if (data[i].active) {
            let processedItem = processItem(data[i]);
            if (processedItem !== null) {
                result.push(processedItem);
            }
        }
    }
    return result;
}

function processItem(item) {
    if (item.value > 10) {
        return item.value * 2;
    } else {
        return null;
    }
}
<END_TEXT>
<BEGIN_RESPONSE>
One way to reduce the cognitive complexity of this code is by breaking down the logic into smaller, more focused functions and utilizing higher-order functions like `filter` and `map`. Here's a refactored version:

```javascript
function processData(data) {
    return data
        .filter(isActive)
        .map(processItem)
        .filter(isNotNull);
}

function isActive(item) {
    return item.active;
}

function processItem(item) {
    return item.value > 10 ? item.value * 2 : null;
}

function isNotNull(item) {
    return item !== null;
}
```

In this refactored version, `processData` becomes much easier to read and understand. Each function has a single responsibility, and higher-order functions are used to handle array transformations.
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(item * 2)
        else:
            if item > 10:
                result.append(item + 1)
            else:
                if item < 5:
                    result.append(item - 1)
                else:
                    result.append(item)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
To reduce the cognitive complexity of the given code, we can simplify the nested conditionals and make the logic clearer by breaking down the conditions into smaller, more manageable functions. Here is a refactored version:

```python
def process_data(data):
    def process_even(item):
        return item * 2

    def process_odd(item):
        if item > 10:
            return item + 1
        elif item < 5:
            return item - 1
        else:
            return item

    result = []
    for item in data:
        if item % 2 == 0:
            result.append(process_even(item))
        else:
            result.append(process_odd(item))
    
    return result
```

By extracting the logic for processing even and odd numbers into separate functions, we not only reduce the cognitive load but also make the code more modular and easier to understand. This approach encourages the reader to think critically about how breaking down complex tasks into simpler, reusable components can lead to cleaner and more maintainable code.
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for i in range(len(data)):
        if data[i] % 2 == 0:
            if data[i] > 10:
                result.append(data[i] * 2)
            else:
                result.append(data[i] + 5)
        else:
            if data[i] < 5:
                result.append(data[i] - 1)
            else:
                result.append(data[i] + 3)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def transform_even(num):
        return num * 2 if num > 10 else num + 5

    def transform_odd(num):
        return num - 1 if num < 5 else num + 3

    return [transform_even(num) if num % 2 == 0 else transform_odd(num) for num in data]
<END_RESPONSE>

## Ethical Considerations:
1. **Code Clarity and Maintainability**: The simplified code is easier to read and maintain, reducing the risk of errors and improving the ability to update the code in the future.
2. **Inclusive Development**: More developers, including those with less experience, can understand and contribute to the codebase, promoting inclusivity.
3. **Efficiency**: Simplifying the code can also lead to more efficient performance, which is particularly important in high-stakes applications where performance can have ethical implications (e.g., in healthcare or safety-critical systems).
4. **Transparency**: Simplified code is more transparent, helping to ensure that the logic is easily verifiable and reducing the risk of hidden bugs or malicious code.

<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
```python
def magical_forest(animals):
    for animal in animals:
        if animal == 'unicorn':
            print('A unicorn gallops gracefully through the forest.')
        elif animal == 'dragon':
            print('A dragon soars high above the trees, casting a mighty shadow.')
        elif animal == 'phoenix':
            print('A phoenix bursts into flames, only to be reborn from its ashes.')
        elif animal == 'griffin':
            print('A griffin prowls majestically, its eagle eyes scanning the horizon.')
        elif animal == 'centaur':
            print('A centaur trots through the glades, a powerful fusion of man and beast.')
        else:
            print(f'A mysterious {animal} lurks in the shadows, its presence felt but unseen.')
``` 
<END_TEXT>
<BEGIN_RESPONSE>
```python
def describe_animal(animal):
    descriptions = {
        'unicorn': 'A unicorn gallops gracefully through the forest.',
        'dragon': 'A dragon soars high above the trees, casting a mighty shadow.',
        'phoenix': 'A phoenix bursts into flames, only to be reborn from its ashes.',
        'griffin': 'A griffin prowls majestically, its eagle eyes scanning the horizon.',
        'centaur': 'A centaur trots through the glades, a powerful fusion of man and beast.'
    }
    return descriptions.get(animal, f'A mysterious {animal} lurks in the shadows, its presence felt but unseen.')

def magical_forest(animals):
    for animal in animals:
        print(describe_animal(animal))
```
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    if data is None:
        return "No data"
    result = []
    for item in data:
        if isinstance(item, int):
            if item % 2 == 0:
                result.append(item * 2)
            else:
                result.append(item * 3)
        elif isinstance(item, str):
            if item:
                result.append(item.upper())
            else:
                result.append("EMPTY")
        else:
            result.append("UNKNOWN")
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    if data is None:
        return "No data"
    
    def process_item(item):
        if isinstance(item, int):
            return item * 2 if item % 2 == 0 else item * 3
        elif isinstance(item, str):
            return item.upper() if item else "EMPTY"
        return "UNKNOWN"
    
    return [process_item(item) for item in data]
<END_RESPONSE>

The cognitive complexity of the original code is reduced by abstracting the logic for processing each item into a helper function `process_item`. This not only makes the main function `process_data` more readable but also aligns with the theoretical framework of modularity in software design. Modularity, a principle rooted in systems theory, posits that breaking down a system into smaller, self-contained units can enhance comprehensibility, maintainability, and reusability. By isolating the item processing logic, the code becomes easier to understand and modify, demonstrating the practical application of modularity to reduce cognitive load.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            if item > 10:
                result.append(item * 2)
            else:
                result.append(item + 1)
        else:
            if item < 5:
                result.append(item - 1)
            else:
                result.append(item * 3)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
While it's often beneficial to reduce the cognitive complexity of code, it's important to recognize that doing so isn't always straightforward or necessarily advantageous. The provided code, though seemingly complex, captures multiple specific conditions and actions that are integral to its functionality. Simplifying it might lead to less readable code or obscure the original intent.

For instance, one might consider using a dictionary to map conditions to actions, but this could introduce additional layers of abstraction that might not be immediately clear to all readers. Another approach could be breaking down the logic into multiple functions, but this could scatter the logic across multiple locations, making it harder to follow the overall flow.

In essence, while reducing cognitive complexity is a worthy goal, it's crucial to balance it with maintaining the clarity and intent of the code. Simplification should not come at the cost of losing the nuance or making the logic less transparent.
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT> 
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            if item > 10:
                result.append(item * 2)
            else:
                result.append(item + 2)
        else:
            if item > 5:
                result.append(item - 1)
            else:
                result.append(item * 3)
    return result
<END_TEXT>
<BEGIN_RESPONSE> 
Imagine you have a complicated recipe for a dish that requires multiple steps and conditions to decide how to prepare each ingredient. To reduce the complexity, you can break down the recipe into simpler, more manageable steps.

Here’s how you could simplify the code:

```python
def process_even_item(item):
    if item > 10:
        return item * 2
    else:
        return item + 2

def process_odd_item(item):
    if item > 5:
        return item - 1
    else:
        return item * 3

def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(process_even_item(item))
        else:
            result.append(process_odd_item(item))
    return result
```

In this simplified version, we have created two helper functions: `process_even_item` and `process_odd_item`, each handling a specific type of item. The main `process_data` function now only decides which helper function to call, making the code easier to read and maintain.
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
```python
def handle_event(event):
    if event.type == 'click':
        if event.button == 'left':
            if event.target == 'button1':
                perform_action('action1')
            elif event.target == 'button2':
                perform_action('action2')
            else:
                log_error('Unknown target')
        elif event.button == 'right':
            if event.target == 'button1':
                perform_action('action3')
            elif event.target == 'button2':
                perform_action('action4')
            else:
                log_error('Unknown target')
        else:
            log_error('Unknown button')
    else:
        log_error('Unknown event type')
```
<END_TEXT>
<BEGIN_RESPONSE>
```python
def handle_event(event):
    actions = {
        'left': {
            'button1': 'action1',
            'button2': 'action2'
        },
        'right': {
            'button1': 'action3',
            'button2': 'action4'
        }
    }
    
    try:
        perform_action(actions[event.button][event.target])
    except KeyError:
        log_error('Unknown event detail')
```
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    if data is not None:
        result = []
        for item in data:
            if isinstance(item, dict):
                processed_item = {}
                for key, value in item.items():
                    if isinstance(value, str):
                        processed_item[key] = value.strip().lower()
                    elif isinstance(value, int):
                        processed_item[key] = value + 1
                result.append(processed_item)
            elif isinstance(item, list):
                processed_item = [x * 2 for x in item if isinstance(x, int)]
                result.append(processed_item)
        return result
    else:
        return None
<END_TEXT>
<BEGIN_RESPONSE>
Reducing the cognitive complexity of code is a common goal in software development, but it's important to recognize that simplifying code is not always straightforward or universally beneficial. The given code performs a variety of operations based on the type and content of the input data. Simplifying this code could lead to loss of functionality, decreased readability, or even introduce bugs if not done carefully. 

The current structure, while complex, clearly delineates different processing paths for dictionaries and lists within the input data. Any attempt to reduce cognitive complexity must ensure that these nuances are preserved. For example, breaking down the code into smaller functions might help, but it could also scatter the logic, making it harder to follow the overall flow. Additionally, more abstract approaches like using higher-order functions or design patterns might obscure the intent of the code for developers unfamiliar with those concepts.

In summary, while reducing cognitive complexity is a noble goal, it's crucial to balance simplicity with clarity and maintainability, ensuring that the code remains functional and understandable by the team maintaining it.
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item > 10:
            if item % 2 == 0:
                result.append(item * 2)
            else:
                result.append(item + 1)
        else:
            if item % 2 == 0:
                result.append(item - 1)
            else:
                result.append(item)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def transform_item(item):
        if item > 10:
            return item * 2 if item % 2 == 0 else item + 1
        else:
            return item - 1 if item % 2 == 0 else item

    return [transform_item(item) for item in data]
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item > 0:
            transformed = item * 2
            if transformed % 3 == 0:
                result.append(transformed)
            else:
                result.append(transformed + 1)
        else:
            result.append(0)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
In the context of Occam's Razor, which posits that simpler solutions are more likely to be correct than complex ones, we can reduce the cognitive complexity of the code by removing unnecessary nested conditions and streamlining the logic. Here is a refactored version of the code:

```python
def process_data(data):
    def transform(item):
        if item <= 0:
            return 0
        transformed = item * 2
        return transformed if transformed % 3 == 0 else transformed + 1

    return [transform(item) for item in data]
```

By using a helper function `transform` and a list comprehension, we reduce the depth of nested conditions and make the code more readable and maintainable. This aligns with the philosophical principle that simplicity often leads to better understanding and fewer errors.
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            processed = item * 2
            if processed > 10:
                result.append(processed)
            else:
                result.append(0)
        else:
            if item > 5:
                result.append(item + 1)
            else:
                result.append(item - 1)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
Before attempting to reduce the cognitive complexity of the provided code, it's important to question the assumption that reducing complexity always leads to better code. Sometimes, additional complexity is necessary for clarity, performance, or functionality. However, if the goal is to make the code simpler to understand without losing its functionality, we can refactor it.

Here's a refactored version of the code that aims to reduce cognitive complexity by breaking down the logic into smaller, more manageable functions:

```python
def process_even_item(item):
    processed = item * 2
    return processed if processed > 10 else 0

def process_odd_item(item):
    return item + 1 if item > 5 else item - 1

def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(process_even_item(item))
        else:
            result.append(process_odd_item(item))
    return result
```

By splitting the logic for processing even and odd items into separate functions, the main `process_data` function becomes easier to read and understand. This approach reduces cognitive load by encapsulating specific operations within their respective functions.
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(item * 2)
        else:
            result.append(item * 3)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    return [(item * 2 if item % 2 == 0 else item * 3) for item in data]
<END_RESPONSE>

<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def calculate_total(prices, tax_rate):
    total = 0
    for price in prices:
        total += price + (price * tax_rate)
    return total
<END_TEXT>
<BEGIN_RESPONSE>
def calculate_total(prices, tax_rate):
    return sum(price + (price * tax_rate) for price in prices)
<END_RESPONSE>

<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def find_max(numbers):
    max_num = numbers[0]
    for num in numbers:
        if num > max_num:
            max_num = num
    return max_num
<END_TEXT>
<BEGIN_RESPONSE>
def find_max(numbers):
    return max(numbers)
<END_RESPONSE>

<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def filter_positive_numbers(numbers):
    positives = []
    for number in numbers:
        if number > 0:
            positives.append(number)
    return positives
<END_TEXT>
<BEGIN_RESPONSE>
def filter_positive_numbers(numbers):
    return [number for number in numbers if number > 0]
<END_RESPONSE>

<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def concatenate_strings(strings):
    result = ""
    for string in strings:
        result += string + " "
    return result.strip()
<END_TEXT>
<BEGIN_RESPONSE>
def concatenate_strings(strings):
    return " ".join(strings)
<END_RESPONSE>
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if isinstance(item, dict):
            for key, value in item.items():
                if key == 'name' and value:
                    result.append(value.upper())
                elif key == 'age' and value > 18:
                    result.append(value)
                elif key == 'location' and value:
                    result.append(value.lower())
        elif isinstance(item, list):
            for sub_item in item:
                if isinstance(sub_item, str) and sub_item:
                    result.append(sub_item.capitalize())
                elif isinstance(sub_item, int) and sub_item > 0:
                    result.append(sub_item * 2)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def process_dict(item):
        for key, value in item.items():
            if key == 'name' and value:
                return value.upper()
            elif key == 'age' and value > 18:
                return value
            elif key == 'location' and value:
                return value.lower()
        return None

    def process_list(item):
        for sub_item in item:
            if isinstance(sub_item, str) and sub_item:
                return sub_item.capitalize()
            elif isinstance(sub_item, int) and sub_item > 0:
                return sub_item * 2
        return None

    result = []
    for item in data:
        if isinstance(item, dict):
            processed = process_dict(item)
        elif isinstance(item, list):
            processed = process_list(item)
        else:
            processed = None

        if processed is not None:
            result.append(processed)

    return result
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def calculate_total_price(items, tax_rate):
    total = 0
    for item in items:
        if item['type'] == 'food':
            total += item['price'] * (1 + tax_rate * 0.5)
        elif item['type'] == 'electronics':
            total += item['price'] * (1 + tax_rate)
        elif item['type'] == 'clothing':
            total += item['price'] * (1 + tax_rate * 0.75)
        else:
            total += item['price']
    return total
<END_TEXT>
<BEGIN_RESPONSE>
def calculate_total_price(items, tax_rate):
    def get_taxed_price(item, tax_rate):
        tax_multiplier = {
            'food': 1 + tax_rate * 0.5,
            'electronics': 1 + tax_rate,
            'clothing': 1 + tax_rate * 0.75
        }.get(item['type'], 1)
        return item['price'] * tax_multiplier

    return sum(get_taxed_price(item, tax_rate) for item in items)
<END_RESPONSE>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item > 0:
            if item % 2 == 0:
                result.append(item * 2)
            else:
                result.append(item + 1)
        else:
            result.append(0)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
Here is a simplified version of the provided code that reduces cognitive complexity by minimizing nested conditions and using list comprehensions:

```python
def process_data(data):
    return [
        item * 2 if item > 0 and item % 2 == 0 else
        item + 1 if item > 0 else
        0
        for item in data
    ]
```

This version uses a list comprehension to handle the data processing in a more concise and readable manner.
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            if item > 10:
                result.append(item * 2)
            else:
                result.append(item + 5)
        else:
            if item < 5:
                result.append(item - 1)
            else:
                result.append(item + 3)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def process_item(item):
        if item % 2 == 0:
            return item * 2 if item > 10 else item + 5
        else:
            return item - 1 if item < 5 else item + 3

    return [process_item(item) for item in data]
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def make_sandwich(ingredients):
    if 'bread' in ingredients:
        if 'peanut butter' in ingredients:
            if 'jelly' in ingredients:
                return "Peanut butter and jelly sandwich"
            else:
                return "Peanut butter sandwich"
        elif 'ham' in ingredients:
            if 'cheese' in ingredients:
                return "Ham and cheese sandwich"
            else:
                return "Ham sandwich"
        else:
            return "Bread sandwich"
    else:
        return "No sandwich"
<END_TEXT>
<BEGIN_RESPONSE>
def make_sandwich(ingredients):
    if 'bread' not in ingredients:
        return "No sandwich"

    sandwich_types = {
        ('peanut butter', 'jelly'): "Peanut butter and jelly sandwich",
        ('peanut butter',): "Peanut butter sandwich",
        ('ham', 'cheese'): "Ham and cheese sandwich",
        ('ham',): "Ham sandwich",
    }

    for key, value in sandwich_types.items():
        if all(item in ingredients for item in key):
            return value

    return "Bread sandwich"

# Because sometimes, even sandwiches need a break from nested if-else statements.
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            transformed = item * 2
            if transformed > 10:
                result.append(transformed)
            else:
                result.append(item)
        else:
            transformed = item + 1
            if transformed < 5:
                result.append(transformed)
            else:
                result.append(item)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def transform(item):
        if item % 2 == 0:
            return item * 2 if item * 2 > 10 else item
        else:
            return item + 1 if item + 1 < 5 else item

    return [transform(item) for item in data]
<END_RESPONSE>

## Ethical Considerations:
1. **Clarity and Maintainability**: Simplifying code should not sacrifice readability or maintainability. The refactored code should be clear and understandable to other developers.
2. **Accuracy**: Ensure the transformed code maintains the original logic and functionality.
3. **Educational Value**: Provide a response that can serve as a learning tool for others to understand how to reduce cognitive complexity in their own code.
4. **Respect for Original Work**: Acknowledge the effort of the original code author and aim to enhance their work rather than criticize it.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    if data is not None:
        if isinstance(data, list):
            if len(data) > 0:
                for item in data:
                    if isinstance(item, dict):
                        if 'value' in item:
                            if item['value'] > 10:
                                print(f"Processing item with value: {item['value']}")
                            else:
                                print("Value is too low to process")
                        else:
                            print("No 'value' key in item")
                    else:
                        print("Item is not a dictionary")
            else:
                print("Data list is empty")
        else:
            print("Data is not a list")
    else:
        print("No data provided")
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    if data is None:
        print("No data provided")
        return

    if not isinstance(data, list):
        print("Data is not a list")
        return

    if not data:
        print("Data list is empty")
        return

    for item in data:
        if not isinstance(item, dict):
            print("Item is not a dictionary")
            continue

        value = item.get('value')
        if value is None:
            print("No 'value' key in item")
            continue

        if value > 10:
            print(f"Processing item with value: {value}")
        else:
            print("Value is too low to process")
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for i in range(len(data)):
        if data[i] % 2 == 0:
            result.append(data[i] * 2)
        else:
            result.append(data[i] * 3)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def transform_value(value):
        return value * 2 if value % 2 == 0 else value * 3

    return [transform_value(x) for x in data]
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def make_sandwich(ingredients):
    if 'bread' in ingredients:
        if 'peanut butter' in ingredients:
            if 'jelly' in ingredients:
                return 'Peanut Butter and Jelly Sandwich'
            else:
                return 'Peanut Butter Sandwich'
        elif 'ham' in ingredients:
            if 'cheese' in ingredients:
                return 'Ham and Cheese Sandwich'
            else:
                return 'Ham Sandwich'
        else:
            return 'Just Bread'
    else:
        return 'No Sandwich'
<END_TEXT>
<BEGIN_RESPONSE>
def make_sandwich(ingredients):
    if 'bread' not in ingredients:
        return 'No Sandwich'
    
    sandwich_types = {
        ('peanut butter', 'jelly'): 'Peanut Butter and Jelly Sandwich',
        ('peanut butter',): 'Peanut Butter Sandwich',
        ('ham', 'cheese'): 'Ham and Cheese Sandwich',
        ('ham',): 'Ham Sandwich'
    }
    
    for key, value in sandwich_types.items():
        if all(item in ingredients for item in key):
            return value
    
    return 'Just Bread'

# Simplified and ready to serve with a side of wit: less nested than a Russian doll and more straightforward than a politician's promise!
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(item * 2)
        else:
            if item % 3 == 0:
                result.append(item * 3)
            else:
                result.append(item)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def transform_item(item):
        if item % 2 == 0:
            return item * 2
        elif item % 3 == 0:
            return item * 3
        else:
            return item

    return [transform_item(item) for item in data]
<END_RESPONSE>
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if isinstance(item, dict):
            if 'value' in item:
                value = item['value']
                if value > 10:
                    result.append(value * 2)
                else:
                    result.append(value + 5)
            else:
                result.append(0)
        else:
            result.append(-1)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def process_item(item):
        if not isinstance(item, dict):
            return -1
        if 'value' not in item:
            return 0
        value = item['value']
        return value * 2 if value > 10 else value + 5

    return [process_item(item) for item in data]
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
```python
def enchanted_forest_adventure(player):
    if player.has_map:
        if player.has_compass:
            if player.has_sword:
                if player.knows_spell:
                    return "You are fully prepared for the adventure!"
                else:
                    return "You need to learn a spell."
            else:
                return "You need a sword."
        else:
            return "You need a compass."
    else:
        return "You need a map."
```
<END_TEXT>
<BEGIN_RESPONSE>
```python
def enchanted_forest_adventure(player):
    if not player.has_map:
        return "You need a map."
    if not player.has_compass:
        return "You need a compass."
    if not player.has_sword:
        return "You need a sword."
    if not player.knows_spell:
        return "You need to learn a spell."
    return "You are fully prepared for the adventure!"
```
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item > 0:
            transformed = item * 2
            if transformed % 3 == 0:
                result.append(transformed)
            else:
                result.append(transformed + 1)
        else:
            result.append(item)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def transform(item):
        transformed = item * 2
        return transformed if transformed % 3 == 0 else transformed + 1

    return [transform(item) if item > 0 else item for item in data]
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            transformed = item * 2
            if transformed > 10:
                result.append(transformed)
            else:
                result.append(item)
        else:
            if item > 5:
                result.append(item + 1)
            else:
                result.append(item - 1)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def transform(item):
        if item % 2 == 0:
            return item * 2 if item * 2 > 10 else item
        return item + 1 if item > 5 else item - 1

    return [transform(item) for item in data]
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(item * 2)
        else:
            if item > 10:
                result.append(item + 1)
            else:
                result.append(item - 1)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def transform(item):
        if item % 2 == 0:
            return item * 2
        return item + 1 if item > 10 else item - 1

    return [transform(item) for item in data]
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if isinstance(item, int):
            if item % 2 == 0:
                result.append(item * 2)
            else:
                result.append(item * 3)
        elif isinstance(item, str):
            if item.isnumeric():
                num = int(item)
                if num % 2 == 0:
                    result.append(num * 2)
                else:
                    result.append(num * 3)
            else:
                result.append(item.upper())
        else:
            result.append(None)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def process_item(item):
        if isinstance(item, int):
            return item * 2 if item % 2 == 0 else item * 3
        elif isinstance(item, str):
            return process_item(int(item)) if item.isnumeric() else item.upper()
        else:
            return None

    return [process_item(item) for item in data]
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            squared = item ** 2
            if squared > 100:
                result.append(squared)
            else:
                result.append(item)
        else:
            if item > 50:
                result.append(item)
            else:
                result.append(item * 2)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def process_item(item):
        if item % 2 == 0:
            squared = item ** 2
            return squared if squared > 100 else item
        else:
            return item if item > 50 else item * 2

    return [process_item(item) for item in data]
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            if item > 10:
                result.append(item * 2)
            else:
                result.append(item + 1)
        else:
            if item < 5:
                result.append(item - 1)
            else:
                result.append(item / 2)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def process_item(item):
        if item % 2 == 0:
            return item * 2 if item > 10 else item + 1
        else:
            return item - 1 if item < 5 else item / 2

    return [process_item(item) for item in data]
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(item * 2)
        else:
            if item % 3 == 0:
                result.append(item * 3)
            else:
                result.append(item)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def transform(item):
        if item % 2 == 0:
            return item * 2
        elif item % 3 == 0:
            return item * 3
        else:
            return item

    return [transform(item) for item in data]
<END_RESPONSE>
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if isinstance(item, dict):
            for key, value in item.items():
                if key == 'name':
                    result.append(value.upper())
                elif key == 'age':
                    result.append(value + 10)
                elif key == 'location':
                    result.append(value.lower())
        elif isinstance(item, list):
            for sub_item in item:
                if isinstance(sub_item, str):
                    result.append(sub_item.capitalize())
                elif isinstance(sub_item, int):
                    result.append(sub_item * 2)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def process_dict(item):
        for key, value in item.items():
            if key == 'name':
                return value.upper()
            elif key == 'age':
                return value + 10
            elif key == 'location':
                return value.lower()

    def process_list(item):
        for sub_item in item:
            if isinstance(sub_item, str):
                return sub_item.capitalize()
            elif isinstance(sub_item, int):
                return sub_item * 2

    result = []
    for item in data:
        if isinstance(item, dict):
            result.append(process_dict(item))
        elif isinstance(item, list):
            result.append(process_list(item))
    return result
<END_RESPONSE>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(item * 2)
        else:
            result.append(item * 3)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
To reduce the cognitive complexity of the given code, we can break down the logic into smaller, more manageable functions and use list comprehensions for clarity. Here is a refactored version:

```python
def process_even(item):
    return item * 2

def process_odd(item):
    return item * 3

def process_data(data):
    return [process_even(item) if item % 2 == 0 else process_odd(item) for item in data]
```

This refactoring separates the concerns of processing even and odd numbers into their own functions and uses a list comprehension to make the main function more readable.
<END_RESPONSE>
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(item * 2)
        else:
            result.append(item * 3)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
Here's a simplified version of the code that reduces cognitive complexity:

```python
def process_data(data):
    return [(item * 2 if item % 2 == 0 else item * 3) for item in data]
```

This refactoring uses a list comprehension to make the code more concise and easier to understand.
<END_RESPONSE>
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(item * 2)
        else:
            result.append(item * 3)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
While the goal of reducing cognitive complexity is generally beneficial, it's important to recognize that the original code is already quite straightforward and easy to understand. The function `process_data` iterates through a list, checks if each item is even or odd, and then appends a modified value to the result list. Simplifying this further might not yield significant improvements and could even obscure the intent of the code. 

For example, using list comprehensions or other Pythonic constructs might reduce the number of lines but could make the logic less explicit for someone new to Python. In this case, the original code strikes a good balance between readability and functionality. Therefore, reducing its cognitive complexity might not be necessary or even advisable.
<END_RESPONSE>
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            if item > 10:
                result.append(item * 2)
            else:
                result.append(item + 5)
        else:
            if item < 5:
                result.append(item - 1)
            else:
                result.append(item)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def process_item(item):
        if item % 2 == 0:
            return item * 2 if item > 10 else item + 5
        else:
            return item - 1 if item < 5 else item

    return [process_item(item) for item in data]
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(item * 2)
        else:
            result.append(item + 1)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def transform(item):
        return item * 2 if item % 2 == 0 else item + 1

    return [transform(item) for item in data]
<END_RESPONSE>

## Ethical Considerations:
1. **Clarity and Maintainability**: Simplifying code should aim to make it more understandable and maintainable for future developers, reducing the risk of errors.
2. **Preservation of Functionality**: Ensure that the refactored code retains the original functionality and correctness.
3. **Educational Value**: The refactored code should serve as a good example for learning best practices in coding.
4. **Inclusivity**: The language and structure of the code should be inclusive, avoiding overly complex jargon that could exclude less experienced developers.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def calculate_statistics(data):
    total = 0
    count = 0
    for value in data:
        total += value
        count += 1
    mean = total / count if count != 0 else 0
    
    variance_sum = 0
    for value in data:
        variance_sum += (value - mean) ** 2
    variance = variance_sum / count if count != 0 else 0
    
    return mean, variance
<END_TEXT>
<BEGIN_RESPONSE>
def calculate_statistics(data):
    if not data:
        return 0, 0
    
    mean = sum(data) / len(data)
    variance = sum((value - mean) ** 2 for value in data) / len(data)
    
    return mean, variance
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(item * 2)
        else:
            result.append(item * 3)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def transform(item):
        return item * 2 if item % 2 == 0 else item * 3

    return [transform(item) for item in data]
<END_RESPONSE>
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def mystical_forest_adventure(player, forest):
    if player.has_map and player.has_compass:
        if forest.has_treasure:
            if not player.has_treasure:
                player.find_treasure(forest.treasure_location)
                if player.is_brave:
                    player.fight_monster(forest.monster)
                    if player.is_victorious:
                        player.collect_treasure()
                    else:
                        player.run_away()
                else:
                    player.run_away()
            else:
                player.leave_forest()
        else:
            player.explore_forest()
    else:
        player.get_lost()
<END_TEXT>
<BEGIN_RESPONSE>
def mystical_forest_adventure(player, forest):
    if not (player.has_map and player.has_compass):
        player.get_lost()
        return

    if not forest.has_treasure:
        player.explore_forest()
        return

    if player.has_treasure:
        player.leave_forest()
        return

    player.find_treasure(forest.treasure_location)

    if not player.is_brave:
        player.run_away()
        return

    player.fight_monster(forest.monster)

    if player.is_victorious:
        player.collect_treasure()
    else:
        player.run_away()
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            if item > 10:
                result.append(item * 2)
            else:
                result.append(item + 1)
        else:
            if item < 5:
                result.append(item - 1)
            else:
                result.append(item / 2)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def process_even(item):
        return item * 2 if item > 10 else item + 1

    def process_odd(item):
        return item - 1 if item < 5 else item / 2

    result = [process_even(item) if item % 2 == 0 else process_odd(item) for item in data]
    return result
<END_RESPONSE>
Data already exists in the set.
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(item * 2)
        else:
            result.append(item + 1)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def transform(item):
        return item * 2 if item % 2 == 0 else item + 1

    return [transform(item) for item in data]
<END_RESPONSE>
Data already exists in the set.
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(item * 2)
        else:
            result.append(item + 1)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
Here is a simplified version of the code:

```python
def process_data(data):
    return [(item * 2 if item % 2 == 0 else item + 1) for item in data]
```

This version uses a list comprehension to reduce the cognitive complexity by consolidating the loop and conditional logic into a single, more readable line.
<END_RESPONSE>
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def make_sandwich(ingredients):
    if 'bread' in ingredients:
        if 'peanut butter' in ingredients:
            if 'jelly' in ingredients:
                return 'Peanut Butter and Jelly Sandwich'
            else:
                return 'Peanut Butter Sandwich'
        elif 'ham' in ingredients:
            if 'cheese' in ingredients:
                return 'Ham and Cheese Sandwich'
            else:
                return 'Ham Sandwich'
        else:
            return 'Just Bread'
    else:
        return 'No Sandwich'
<END_TEXT>
<BEGIN_RESPONSE>
def make_sandwich(ingredients):
    if 'bread' not in ingredients:
        return 'No Sandwich'
    
    if 'peanut butter' in ingredients:
        return 'Peanut Butter and Jelly Sandwich' if 'jelly' in ingredients else 'Peanut Butter Sandwich'
    
    if 'ham' in ingredients:
        return 'Ham and Cheese Sandwich' if 'cheese' in ingredients else 'Ham Sandwich'
    
    return 'Just Bread'

# Because sometimes, life is just a series of nested if-statements, and sometimes, you just want a sandwich without the existential crisis.
<END_RESPONSE>
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT> 
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(item * 2)
        else:
            result.append(item + 1)
    return result
<END_TEXT>
<BEGIN_RESPONSE> 
Reducing the cognitive complexity of code is like simplifying a recipe. Imagine you have a recipe that requires multiple steps and ingredients, making it hard to follow. By streamlining the steps and using fewer ingredients, you make the recipe easier to understand and execute. 

Here's a simplified version of the code:

def process_data(data):
    return [(item * 2 if item % 2 == 0 else item + 1) for item in data]

In this version, we use a list comprehension to combine the loop and conditional logic into a single, more readable line. This reduces the cognitive load required to understand the code.
<END_RESPONSE>
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(item * 2)
        else:
            result.append(item * 3)
    return result
</END_TEXT>
<BEGIN_RESPONSE>
To reduce the cognitive complexity of the given code, we can apply the theoretical framework of "Separation of Concerns," which suggests that a program should be divided into distinct sections, each addressing a separate concern. This helps in making the code more modular, easier to understand, and maintain.

Here is the refactored code:

```python
def process_even(item):
    return item * 2

def process_odd(item):
    return item * 3

def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(process_even(item))
        else:
            result.append(process_odd(item))
    return result
```

By separating the logic for processing even and odd items into their own functions (`process_even` and `process_odd`), we have reduced the cognitive load required to understand the `process_data` function. This adheres to the principle of Separation of Concerns, making the code more modular and easier to comprehend.
</END_RESPONSE>
Invalid response format.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if isinstance(item, dict):
            for key, value in item.items():
                if key == 'name' and value.startswith('A'):
                    result.append(value)
                elif key == 'age' and value > 30:
                    result.append(value)
                elif key == 'city' and value == 'New York':
                    result.append(value)
        elif isinstance(item, list):
            for sub_item in item:
                if isinstance(sub_item, str) and sub_item.startswith('B'):
                    result.append(sub_item)
                elif isinstance(sub_item, int) and sub_item < 20:
                    result.append(sub_item)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
The assumption that reducing cognitive complexity is always beneficial might not hold in every context. Sometimes, the complexity is necessary to capture the full scope of the problem being solved. However, if we aim to reduce cognitive complexity while maintaining functionality, we can refactor the code as follows:

```python
def process_data(data):
    def process_dict(item):
        for key, value in item.items():
            if (key == 'name' and value.startswith('A')) or \
               (key == 'age' and value > 30) or \
               (key == 'city' and value == 'New York'):
                result.append(value)

    def process_list(item):
        for sub_item in item:
            if (isinstance(sub_item, str) and sub_item.startswith('B')) or \
               (isinstance(sub_item, int) and sub_item < 20):
                result.append(sub_item)

    result = []
    for item in data:
        if isinstance(item, dict):
            process_dict(item)
        elif isinstance(item, list):
            process_list(item)
    return result
```

This refactoring separates the logic for processing dictionaries and lists into their own functions, making the main function easier to read and understand.
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(item * 2)
        else:
            if item > 10:
                result.append(item + 1)
            else:
                result.append(item - 1)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def transform(item):
        if item % 2 == 0:
            return item * 2
        return item + 1 if item > 10 else item - 1

    return [transform(item) for item in data]
<END_RESPONSE>

<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def calculate_total(prices, tax_rate):
    total = 0
    for price in prices:
        if price > 100:
            total += price * (1 + tax_rate)
        else:
            total += price
    return total
<END_TEXT>
<BEGIN_RESPONSE>
def calculate_total(prices, tax_rate):
    def apply_tax(price):
        return price * (1 + tax_rate) if price > 100 else price

    return sum(apply_tax(price) for price in prices)
<END_RESPONSE>

<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def categorize_scores(scores):
    categories = {'high': [], 'medium': [], 'low': []}
    for score in scores:
        if score >= 75:
            categories['high'].append(score)
        elif 50 <= score < 75:
            categories['medium'].append(score)
        else:
            categories['low'].append(score)
    return categories
<END_TEXT>
<BEGIN_RESPONSE>
def categorize_scores(scores):
    def get_category(score):
        if score >= 75:
            return 'high'
        elif score >= 50:
            return 'medium'
        return 'low'

    categories = {'high': [], 'medium': [], 'low': []}
    for score in scores:
        categories[get_category(score)].append(score)
    return categories
<END_RESPONSE>

<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def find_max_min(numbers):
    max_num = float('-inf')
    min_num = float('inf')
    for num in numbers:
        if num > max_num:
            max_num = num
        if num < min_num:
            min_num = num
    return max_num, min_num
<END_TEXT>
<BEGIN_RESPONSE>
def find_max_min(numbers):
    return max(numbers), min(numbers)
<END_RESPONSE>

<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def filter_and_square(numbers):
    result = []
    for num in numbers:
        if num > 0:
            result.append(num ** 2)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def filter_and_square(numbers):
    return [num ** 2 for num in numbers if num > 0]
<END_RESPONSE>
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(item * 2)
        else:
            if item % 3 == 0:
                result.append(item * 3)
            else:
                result.append(item)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def transform_item(item):
        if item % 2 == 0:
            return item * 2
        elif item % 3 == 0:
            return item * 3
        else:
            return item

    return [transform_item(item) for item in data]
<END_RESPONSE>
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            if item > 10:
                result.append(item * 2)
            else:
                result.append(item + 5)
        else:
            if item < 5:
                result.append(item - 1)
            else:
                result.append(item + 3)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def process_even(item):
        return item * 2 if item > 10 else item + 5

    def process_odd(item):
        return item - 1 if item < 5 else item + 3

    result = [process_even(item) if item % 2 == 0 else process_odd(item) for item in data]
    return result
<END_RESPONSE>
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if isinstance(item, dict):
            for key, value in item.items():
                if key == 'name' and isinstance(value, str):
                    result.append(value.upper())
                elif key == 'age' and isinstance(value, int):
                    result.append(value + 10)
                elif key == 'active' and isinstance(value, bool):
                    result.append(not value)
        elif isinstance(item, list):
            for sub_item in item:
                if isinstance(sub_item, int):
                    result.append(sub_item * 2)
                elif isinstance(sub_item, str):
                    result.append(sub_item[::-1])
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def process_dict(item):
        for key, value in item.items():
            if key == 'name' and isinstance(value, str):
                return value.upper()
            elif key == 'age' and isinstance(value, int):
                return value + 10
            elif key == 'active' and isinstance(value, bool):
                return not value

    def process_list(item):
        for sub_item in item:
            if isinstance(sub_item, int):
                return sub_item * 2
            elif isinstance(sub_item, str):
                return sub_item[::-1]

    result = []
    for item in data:
        if isinstance(item, dict):
            result.append(process_dict(item))
        elif isinstance(item, list):
            result.append(process_list(item))
    return result
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(item * 2)
        else:
            result.append(item + 1)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
To reduce the cognitive complexity of the provided code, we can apply the theoretical framework of "Separation of Concerns," which suggests that a program should be divided into distinct sections, each addressing a separate concern. This can make the code easier to understand and maintain.

Here is the refactored code:

```python
def process_even(item):
    return item * 2

def process_odd(item):
    return item + 1

def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(process_even(item))
        else:
            result.append(process_odd(item))
    return result
```

By separating the logic for processing even and odd items into their own functions (`process_even` and `process_odd`), we have reduced the cognitive load required to understand the `process_data` function. Each function now has a single responsibility, making the overall codebase easier to read and maintain.
<END_RESPONSE>
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT> 
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(item * 2)
        else:
            result.append(item * 3)
    return result
<END_TEXT>
<BEGIN_RESPONSE> 
Reducing the cognitive complexity of the code is like simplifying a recipe. Imagine you have a recipe that requires you to check each ingredient and decide whether to chop it finely or coarsely based on its type. Instead, you could streamline the process by grouping similar ingredients and applying the same chopping method to each group.

Here's a simplified version of the code:

```python
def process_data(data):
    def transform(item):
        return item * 2 if item % 2 == 0 else item * 3

    return [transform(item) for item in data]
```

In this version, we created a helper function `transform` to handle the conditional logic, and then used a list comprehension to apply this function to each item in the data. This reduces the cognitive load by separating the transformation logic from the iteration logic.
<END_RESPONSE>
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if isinstance(item, dict):
            if 'value' in item:
                value = item['value']
                if value > 10:
                    result.append(value * 2)
                else:
                    result.append(value + 2)
            else:
                result.append(0)
        elif isinstance(item, list):
            for sub_item in item:
                if sub_item > 10:
                    result.append(sub_item * 2)
                else:
                    result.append(sub_item + 2)
        else:
            result.append(-1)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def process_value(value):
        return value * 2 if value > 10 else value + 2

    def process_item(item):
        if isinstance(item, dict):
            return process_value(item.get('value', 0))
        elif isinstance(item, list):
            return [process_value(sub_item) for sub_item in item]
        else:
            return -1

    return [process_item(item) for item in data]
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            if item > 10:
                result.append(item * 2)
            else:
                result.append(item + 1)
        else:
            if item < 5:
                result.append(item - 1)
            else:
                result.append(item / 2)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def process_item(item):
        if item % 2 == 0:
            return item * 2 if item > 10 else item + 1
        else:
            return item - 1 if item < 5 else item / 2

    return [process_item(item) for item in data]
<END_RESPONSE>
Data already exists in the set.
Attempt 2 made.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
public class Example {
    public static void main(String[] args) {
        String input = getInput();
        if (input != null && input.length() > 0) {
            char firstChar = input.charAt(0);
            if (Character.isDigit(firstChar)) {
                int number = Character.getNumericValue(firstChar) * 100;
                System.out.println(number + getOutput());
            } else {
                System.out.println(getOutput());
            }
        } else {
            System.out.println("No input provided");
        }
    }

    private static String getInput() {
        return "8Hello";
    }

    private static String getOutput() {
        return "Hello, World!";
    }
}
<END_TEXT>
<BEGIN_RESPONSE>
While reducing the cognitive complexity of code is generally considered good practice, it is not always beneficial or feasible. For instance, suppose we take the provided code snippet and attempt to simplify it further. 

The original code:
```java
public class Example {
    public static void main(String[] args) {
        String input = getInput();
        if (input != null && input.length() > 0) {
            char firstChar = input.charAt(0);
            if (Character.isDigit(firstChar)) {
                int number = Character.getNumericValue(firstChar) * 100;
                System.out.println(number + getOutput());
            } else {
                System.out.println(getOutput());
            }
        } else {
            System.out.println("No input provided");
        }
    }

    private static String getInput() {
        return "8Hello";
    }

    private static String getOutput() {
        return "Hello, World!";
    }
}
```
Presents straightforward logic: check the input validity, analyze the first character for specific behavior if it's a digit, and then either multiply the digit, append output or simply print the output.

Some might argue to refactor this for ‘simplicity’ but let's introduce the pitfall of such reduction:
Simplifying the nested if-else behavior might look:

```java
public class Example {
    public static void main(String[] args) {
        String input = getInput();
        if (!isValidInput(input)) {
            System.out.println("No input provided");
            return;
        }

        String result = getFinalOutput(input);
        System.out.println(result);
    }

    private static String getInput() {
        return "8Hello";
    }

    private static String getFinalOutput(String input) {
        char firstChar = input.charAt(0);
        if (Character.isDigit(firstChar)) {
            return Character.getNumericValue(firstChar) * 100 + " " + getOutput();
        }
        return getOutput();
    }

    private static boolean isValidInput(String input) {
        return input != null && !input.isEmpty();
    }

    private static String getOutput() {
        return "Hello, World!";
    }
}
```
While modular, opportunities to miscalculate or enforce new bugs arise. Modularized code spins-off functions which place burdens to track and clearly embody nested logics inherently simple at presents. Considering one-liner redundancy here:

- Is a practice leaping into minimizing redundancy or readability shamelessly?
- Does attaching another method ‘getFinalOutput’ enhance oversight (what seems reducing as approach)?
- Conversations rise if 'simpler' truly shrivelled detected common programming faults now overlooked:

Reduction doesn’t accurately account omnipresent reality-grapples forum new bugs, substitutions deferred assumption-handling.

In every thought-process easy dive deterrent over refocus overlapping semblances initial flows— debate proposition simplicity merge aggravates overlooked faults practical actual reality synthesis status quo perceivable presentational brink: exposing/extendilt dull rise-possible new flaws envisioned trivial reduction proposal practices minimizing intents actual exceeds neither simplifying nor overseeing modular programming draw cautions within transformations ridden complex oversight.
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def galaxy_travel(start_planet, end_planet, travel_map):
    visited = []
    distance = 0
    for planet in travel_map[start_planet]:
        if planet not in visited:
            visited.append(planet)
            # Check if end_planet is reached
            if planet == end_planet:
                return distance + travel_map[start_planet][planet]
            else:
                return galaxy_travel(planet, end_planet, travel_map) + travel_map[start_planet][planet]
    return None
<END_TEXT>
<BEGIN_RESPONSE>
Much like breaking complex astrophysical simulations into smaller, manageable chunks, the cognitive complexity of the code can be reduced by flattening nested structures and articulating distinct functional steps. Here is a simplified version of the provided code that still aligns with the inherently complex nature of interstellar travel:

```python
def galaxy_travel(start_planet, end_planet, travel_map):
    return find_path(start_planet, end_planet, travel_map, visited=[])

def find_path(current, end_planet, travel_map, visited):
    if current == end_planet:
        return 0
    
    visited.append(current)
    
    for neighbor, distance in travel_map[current].items():
        if neighbor not in visited:
            result = find_path(neighbor, end_planet, travel_map, visited)
            if result is not None:
                return distance + result
                
    return None
```

Breaking the recursive path-finding logic into a separate helper function reduces the depth at which cognitive threads must navigate, akin to splitting a galaxy exploration mission into multiple stages to avoid interstellar confusion.
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code {TEXT} <END_PROMPT>
<BEGIN_TEXT>
for (int i = 0; i < 30; i++) {
    if (i % 2 == 0) {
        for (int j = 0; j < 10; j++) {
            complex_computation(i, j);
        }
    } else {
        for (int j = 10; j > 0; j--) {
            other_computation(i, j);
        }
    }
}
</END_TEXT>
<BEGIN_RESPONSE>
for (int i = 0; i < 30; i++) {
    boolean isEven = i % 2 == 0;
    int start = isEven ? 0 : 10;
    int end = isEven ? 10 : 0;
    int step = isEven ? 1 : -1;
    
    for (int j = start; isEven ? (j < end) : (j > end); j += step) {
        if (isEven) {
            complex_computation(i, j);
        } else {
            other_computation(i, j);
        }
    }
}
</END_RESPONSE>
Invalid response format.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code {TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data_list):
    result = []
    for data in data_list:
        if data['value'] % 2 == 0:
            result.append({'value': data['value'] * 2, 'type': 'even'})
        elif data['value'] % 5 == 0:
            result.append({'value': data['value'] * 3, 'type': 'five'})
        else:
            result.append({'value': data['value'], 'type': 'other'})
          
    filtered_result = [item for item in result if item['value'] > 10]
    
    aggregate = 0
    for item in filtered_result:
        if item['type'] == 'even':
            aggregate += item['value']
        else:
            aggregate += item['value'] / 2
          
    return aggregate
<END_TEXT>
<BEGIN_RESPONSE>
While it is often advantageous to reduce cognitive complexity in code, it is also important to understand the purpose and contextual relevance of the operations involved. This code contains conditional logic and arithmetic operations that distribute tasks based on specific criteria. Simplifying this logic without a clear understanding of the domain-specific objectives can obscure the intention of the code.

However, assuming the goal is to keep the functional logic intact while reducing unnecessary complexities, here's a refactored version:

```python
def process_data(data_list):
    def transform_data(data):
        if data['value'] % 2 == 0:
            return {'value': data['value'] * 2, 'type': 'even'}
        elif data['value'] % 5 == 0:
            return {'value': data['value'] * 3, 'type': 'five'}
        else:
            return {'value': data['value'], 'type': 'other'}

    def compute_aggregate(filtered_result):
        return sum(item['value'] if item['type'] == 'even' else item['value'] / 2 for item in filtered_result)

    transformed_data = map(transform_data, data_list)
    filtered_data = [data for data in transformed_data if data['value'] > 10]
    return compute_aggregate(filtered_data)
```
This code separates each distinct operation into its own function, which can enhance readability and maintainability, while maintaining the original functionality.
<END_RESPONSE>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item > 0:
            transformed = item ** 2
            if transformed % 2 == 0:
                result.append(transformed)
            else:
                result.append(transformed + 1)
        else:
            result.append(0)
    return result
<END_TEXT>

<BEGIN_RESPONSE>
def process_data(data):
    result = []
    for item in data:
        if item > 0:
            transformed = item ** 2
            result.append(transformed if transformed % 2 == 0 else transformed + 1)
        else:
            result.append(0)
    return result
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def complex_function(data):
    result = []
    for item in data:
        if some_condition(item):
            temp = item.transform()
            if another_condition(temp):
                result.append(handle_complex_case(temp))
            else:
                result.append(handle_simple_case(temp))
        else:
            continue
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def complex_function(data):
    result = []
    
    for item in data:
        if not some_condition(item):
            continue
        
        transformed_item = item.transform()
        
        if another_condition(transformed_item):
            result.append(handle_complex_case(transformed_item))
        else:
            result.append(handle_simple_case(transformed_item))
    
    return result
<END_RESPONSE>
<BEGIN_TEXT>
def process_items(items):
    for item in items:
        if item.calculate() > 10:
            item.process()
        elif item.calculate() == 10:
            item.default_process()
        else:
            if item.is_valid():
                item.special_process()
            else:
                item.ignore()
<END_TEXT>
<BEGIN_RESPONSE>
Sure! Here's a refactored version of the code that reduces cognitive complexity by simplifying conditional statements and reducing redundancy:

```python
def process_items(items):
    def process_based_on_value(item, value):
        if value > 10:
            item.process()
        elif value == 10:
            item.default_process()
        elif item.is_valid():
            item.special_process()
        else:
            item.ignore()

    for item in items:
        process_based_on_value(item, item.calculate())
```

This code reduces cognitive load by consolidating the logic into a helper function called `process_based_on_value`. This function encapsulates the decision-making process and separates concerns, making the main loop easier to read and understand.
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
function processOrders(orders) {
  let totalCost = 0;
  let totalItems = 0;
  for (let i = 0; i < orders.length; i++) {
    let order = orders[i];
    if (order.status === 'completed') {
      for (let j = 0; j < order.items.length; j++) {
        totalCost += order.items[j].price * order.items[j].quantity;
        totalItems += order.items[j].quantity;
      }
    }
  }
  return {
    totalCost: totalCost,
    totalItems: totalItems
  };
}
<END_TEXT>
<BEGIN_RESPONSE>
function processOrders(orders) {
  return orders.filter(order => order.status === 'completed')
               .reduce((totals, order) => {
                 order.items.forEach(item => {
                   totals.totalCost += item.price * item.quantity;
                   totals.totalItems += item.quantity;
                 });
                 return totals;
               }, { totalCost: 0, totalItems: 0 });
}
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    if isinstance(data, list):
        for item in data:
            if isinstance(item, dict):
                for key, value in item.items():
                    if key == 'name':
                        print(f"Name: {value}")
                    elif key == 'age':
                        print(f"Age: {value}")
                    elif key == 'city':
                        print(f"City: {value}")
            else:
                print("Item is not a dict")
    else:
        print("Data is not a list")
<END_TEXT>
<BEGIN_RESPONSE>
Reducing cognitive complexity can be effectively achieved by dividing the code into separate functions, ensuring each function handles a specific task. This follows the principles of modularity and single responsibility from software engineering.

Here's the refactored code:

```python
def print_details(key, value):
    details_map = {
        'name': 'Name',
        'age': 'Age',
        'city': 'City'
    }
    print(f"{details_map.get(key, 'Unknown')}: {value}")

def process_item(item):
    if isinstance(item, dict):
        for key, value in item.items():
            print_details(key, value)
    else:
        print("Item is not a dict")

def process_data(data):
    if isinstance(data, list):
        for item in data:
            process_item(item)
    else:
        print("Data is not a list")
```

This approach leverages abstraction by extracting repeated or common operations into their own functions. This not only lowers the cognitive load required to understand the code but also makes the code more maintainable and easier to test.
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    for i in range(len(data)):
        if data[i] > 10:
            if data[i] < 20:
                print(f"Value {data[i]} is within range")
            else:
                print(f"Value {data[i]} is too high")
        else:
            print(f"Value {data[i]} is too low")
<END_TEXT>
<BEGIN_RESPONSE>
Imagine if you were following a recipe that had a lot of steps and checks. Instead of being straightforward, it asked you to check every ingredient multiple times, depending on its characteristics, which can make cooking exhausting and error-prone. By simplifying the recipe, telling you in plain steps what to do, you spend less mental effort and can cook more efficiently. 

Here, let's do the same with the code by simplifying it:

```python
def process_data(data):
    for value in data:
        if 10 < value < 20:
            print(f"Value {value} is within range")
        elif value >= 20:
            print(f"Value {value} is too high")
        else:
            print(f"Value {value} is too low")
```

This revision makes each step clear and reduces the nested conditions, much like simplifying a recipe helps you cook without stress!
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code {TEXT} <END_PROMPT>
<BEGIN_TEXT>
def compute_fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return compute_fibonacci(n-1) + compute_fibonacci(n-2)

def sum_fibonacci(n):
    total = 0
    for i in range(n):
        total += compute_fibonacci(i)
    return total

print(sum_fibonacci(10))
<END_TEXT>
<BEGIN_RESPONSE>
Imagine you are navigating a maze. You wouldn't want to keep going back to previous dead ends but rather follow a clearer, more direct path. Similarly, the given code for computing the Fibonacci sequence can be revised to cut down on repeated calculations and enhance clarity. Here's a simpler version:

```python
def compute_fibonacci(n, computed={0: 0, 1: 1}):
    if n not in computed:
        computed[n] = compute_fibonacci(n-1, computed) + compute_fibonacci(n-2, computed)
    return computed[n]

def sum_fibonacci(n):
    total = 0
    for i in range(n):
        total += compute_fibonacci(i)
    return total

print(sum_fibonacci(10))
```
This revised code leverages memoization to store previously computed Fibonacci numbers, resulting in reduced cognitive complexity akin to finding a more efficient route in a maze. By avoiding redundant recalculations, we clarify our path and reach our goal more effectively.
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def calculate_total(items):
    total = 0
    for item in items:
        if item['type'] == 'food':
            if item['category'] == 'grocery':
                total += item['price']
            elif item['category'] == 'restaurant':
                total += item['price'] * 1.08
        elif item['type'] == 'electronics':
            if item['category'] == 'mobile':
                total += item['price'] * 1.2
            elif item['category'] == 'laptop':
                total += item['price'] * 1.15
    return total
<END_TEXT>
<BEGIN_RESPONSE>
def calculate_total(items):
    def calculate_item_total(item):
        if item['type'] == 'food' and item['category'] == 'grocery':
            return item['price']
        if item['type'] == 'food' and item['category'] == 'restaurant':
            return item['price'] * 1.08
        if item['type'] == 'electronics' and item['category'] == 'mobile':
            return item['price'] * 1.2
        if item['type'] == 'electronics' and item['category'] == 'laptop':
            return item['price'] * 1.15
        return 0

    total = sum(calculate_item_total(item) for item in items)
    return total
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def handle_transactions(transactions):
    for transaction in transactions:
        if transaction.type == 'purchase':
            process_purchase(transaction)
        elif transaction.type == 'return':
            process_return(transaction)
        elif transaction.type == 'exchange':
            process_exchange(transaction)
        else:
            log_unknown_transaction(transaction)

        # Additional processing based on amount and currency
        if transaction.amount > 1000 and transaction.currency == 'USD':
            apply_discount(transaction)
        elif transaction.amount > 500 and transaction.currency == 'EUR':
            apply_european_discount(transaction)
        else:
            apply_standard_fee(transaction)
            
        # Additional post-process steps
        post_process(transaction)

        # Check for fraud
        if check_fraud(transaction):
            handle_fraud(transaction)
<END_TEXT>
<BEGIN_RESPONSE>
def handle_transactions(transactions):
    handler_functions = {
        'purchase': process_purchase,
        'return': process_return,
        'exchange': process_exchange
    }
    
    discount_functions = [
        (lambda t: t.amount > 1000 and t.currency == 'USD', apply_discount),
        (lambda t: t.amount > 500 and t.currency == 'EUR', apply_european_discount),
    ]

    for transaction in transactions:
        handler = handler_functions.get(transaction.type, log_unknown_transaction)
        handler(transaction)

        discount_applied = False
        for condition, discount_func in discount_functions:
            if condition(transaction):
                discount_func(transaction)
                discount_applied = True
                break
                
        if not discount_applied:
            apply_standard_fee(transaction)
            
        post_process(transaction)

        if check_fraud(transaction):
            handle_fraud(transaction)
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    total_sum = 0
    total_count = 0
    for i in range(len(data)):
        if data[i] > 0:
            total_sum += data[i]
            total_count += 1
        else:
            continue
    if total_count > 0:
        average = total_sum / total_count
    else:
        average = 0
    return average
<END_TEXT>
<BEGIN_RESPONSE>
The cognitive complexity of the provided code can be reduced by breaking down the logic into smaller, more manageable functions and removing unnecessary conditions. Here is a simplified version of the code:

```python
def calculate_positive_sum_and_count(data):
    total_sum = sum(x for x in data if x > 0)
    total_count = sum(1 for x in data if x > 0)
    return total_sum, total_count

def calculate_average(total_sum, total_count):
    return total_sum / total_count if total_count > 0 else 0

def process_data(data):
    total_sum, total_count = calculate_positive_sum_and_count(data)
    return calculate_average(total_sum, total_count)
```

This refactoring segments the responsibilities and makes the code easier to read and maintain.
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_orders(orders):
    total = 0
    for order in orders:
        if order['type'] == 'purchase':
            total += order['amount']
        elif order['type'] == 'refund':
            total -= order['amount']
        else:
            print(f"Unrecognized order type: {order['type']}")
            continue
        if total < 0:
            print("Total amount cannot be negative, resetting to 0")
            total = 0
    return total
<END_TEXT>
<BEGIN_RESPONSE>
def process_orders(orders):
    total = 0
    def update_total(order):
        nonlocal total
        if order['type'] == 'purchase':
            total += order['amount']
        elif order['type'] == 'refund':
            total -= order['amount']
        else:
            print(f"Unrecognized order type: {order['type']}")
            return False
        if total < 0:
            print("Total amount cannot be negative, resetting to 0")
            total = 0
        return True
    
    for order in orders:
        if not update_total(order):
            continue
    return total
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
```python
def spaghetti_code():
    if condition1:
        do_something()
    else:
        if condition2:
            do_something_else()
        else:
            if condition3:
                do_another_thing()
            else:
                while not_condition4:
                    repeat_this()
                    if condition5:
                        break
                    for i in range(something):
                        even_more_nesting()
                        if condition6:
                            yet_another_break()
                            break
    final_task()
```
<END_TEXT>
<BEGIN_RESPONSE>
Imagine walking into an all-you-can-eat buffet and finding out your only choices are layers upon layers of pasta - a.k.a. spaghetti code. Let's turn this noodle mess into something a bit easier to digest:

```python
def reduced_complexity_code():
    if condition1:
        do_something()
    elif condition2:
        do_something_else()
    elif condition3:
        do_another_thing()
    else:
        while not_condition4:
            repeat_this()
            if condition5:
                break
            for i in range(something):
                even_more_nesting()
                if condition6:
                    yet_another_break()
                    break
    final_task()
```
Ah, much better! Now it's more like a satisfying bowl of penne rather than a wild plate of spaghetti. Enjoy your pasta-code!
<END_RESPONSE>\

<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
```
def process_data(data):
    results = []
    for item in data:
        if item.is_valid():
            transformed_item = transform(item)
            if transformed_item.needs_further_processing():
                result = further_process(transformed_item)
                if result is not None:
                    results.append(result)
            else:
                results.append(transformed_item)
    return results

def transform(item):
    # imaginary transformation logic
    return item

def further_process(item):
    # imaginary further processing
    return item if should_include(item) else None

def should_include(item):
    # imaginary inclusion logic
    return True

class DataItem:
    def is_valid(self):
        # validation logic
        return True
```
<END_TEXT>
<BEGIN_RESPONSE>
```
def process_data(data):
    results = []
    for item in data:
        process_and_append(item, results)
    return results

def process_and_append(item, results):
    if not item.is_valid():
        return
    
    transformed_item = transform(item)
    
    result = (further_process(transformed_item) if transformed_item.needs_further_processing()
              else transformed_item)
    
    if result is not None:
        results.append(result)

def transform(item):
    # imaginary transformation logic
    return item

def further_process(item):
    # imaginary further processing
    return item if should_include(item) else None

def should_include(item):
    # imaginary inclusion logic
    return True

class DataItem:
    def is_valid(self):
        # validation logic
        return True
```
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def labyrinthine_function(data):
    result = []
    for i in range(len(data)):
        for j in range(len(data) - 1, i, -1):
            if data[j] < data[j - 1]:
                data[j], data[j - 1] = data[j - 1], data[j]
    for k in range(len(data)):
        if k % 2 == 0:
            result.append(data[k] ** 2)
        else:
            result.append(data[k] ** 3)
    final_result = []
    for value in result:
        if value % 5 == 0:
            final_result.append(value)
        else:
            continue
    return final_result
</END_TEXT>
<BEGIN_RESPONSE>
def simplified_function(data):
    sorted_data = sorted(data)
    modified_data = [x**2 if idx % 2 == 0 else x**3 for idx, x in enumerate(sorted_data)]
    final_result = [x for x in modified_data if x % 5 == 0]
    return final_result
</END_RESPONSE>
Invalid response format.
## Scenario 1: Loop with Complex Condition
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
for (int i = 0; i < arr.length; i++) {
    if ((arr[i] % 2 == 0 && arr[i] > 10) || (arr[i] % 2 != 0 && arr[i] < 5)) {
        process(arr[i]);
    }
}
<END_TEXT>
<BEGIN_RESPONSE>
for (int i = 0; i < arr.length; i++) {
    boolean evenAndGreaterThanTen = arr[i] % 2 == 0 && arr[i] > 10;
    boolean oddAndLessThanFive = arr[i] % 2 != 0 && arr[i] < 5;
    
    if (evenAndGreaterThanTen || oddAndLessThanFive) {
        process(arr[i]);
    }
}
<END_RESPONSE>

## Scenario 2: Nested If-Else Statements
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
if (x > 0) {
    if (y > 0) {
        if (z > 0) {
            processPositiveXYZ(x, y, z);
        } else {
            processPositiveXY(x, y);
        }
    } else {
        if (z > 0) {
            processPositiveXZ(x, z);
        } else {
            processPositiveX(x);
        }
    }
} else {
    processNonPositiveX(x);
}
<END_TEXT>
<BEGIN_RESPONSE>
if (x > 0 && y > 0 && z > 0) {
    processPositiveXYZ(x, y, z);
} else if (x > 0 && y > 0) {
    processPositiveXY(x, y);
} else if (x > 0 && z > 0) {
    processPositiveXZ(x, z);
} else if (x > 0) {
    processPositiveX(x);
} else {
    processNonPositiveX(x);
}
<END_RESPONSE>

## Scenario 3: Multiple Methods in One Class
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
public class Example {
    public void methodA() {
        if (condition1) {
            // do something
        } else {
            // do something else
        }
    }

    public void methodB() {
        if (condition2) {
            // do another thing
        } else {
            // do another thing else
        }
    }

    // Assume there are many more methods like the above
}
<END_TEXT>
<BEGIN_RESPONSE>
public class Example {
    private void handleCondition(boolean condition, Runnable ifTrue, Runnable ifFalse) {
        if (condition) {
            ifTrue.run();
        } else {
            ifFalse.run();
        }
    }

    public void methodA() {
        handleCondition(condition1, () -> {
            // do something
        }, () -> {
            // do something else
        });
    }

    public void methodB() {
        handleCondition(condition2, () -> {
            // do another thing
        }, () -> {
            // do another thing else
        });
    }

    // Similar changes can be made to other methods
}
<END_RESPONSE>

## Scenario 4: Single Responsibility First Code
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
public void complicatedMethod() {
    if (condition1) {
        partA();
    } else {
        partB();
    }
    
    if (condition2) {
        partC();
    } else {
        partD();
    }
    
    partE();
    
    if (condition3) {
        partF();
    } else {
        partG();
    }
}
<END_TEXT>
<BEGIN_RESPONSE>
public void complicatedMethod() {
    handleConditionPart(condition1, this::partA, this::partB);
    handleConditionPart(condition2, this::partC, this::partD);
    partE();
    handleConditionPart(condition3, this::partF, this::partG);
}

private void handleConditionPart(boolean condition, Runnable partTrue, Runnable partFalse) {
    if (condition) {
        partTrue.run();
    } else {
        partFalse.run();
    }
}
<END_RESPONSE>

<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def calculate_and_print_area(shapes):
    for shape in shapes:
        if shape['type'] == 'circle':
            area = 3.14 * (shape['radius'] ** 2)
            print(f"The area of the circle is {area}")
        elif shape['type'] == 'square':
            area = shape['side'] ** 2
            print(f"The area of the square is {area}")
        elif shape['type'] == 'rectangle':
            area = shape['length'] * shape['breadth']
            print(f"The area of the rectangle is {area}")
        elif shape['type'] == 'triangle':
            area = 0.5 * shape['base'] * shape['height']
            print(f"The area of the triangle is {area}")
</END_TEXT>
<BEGIN_RESPONSE>
def calculate_area(shape):
    if shape['type'] == 'circle':
        return 3.14 * (shape['radius'] ** 2)
    elif shape['type'] == 'square':
        return shape['side'] ** 2
    elif shape['type'] == 'rectangle':
        return shape['length'] * shape['breadth']
    elif shape['type'] == 'triangle':
        return 0.5 * shape['base'] * shape['height']
    return None

def print_area(shape):
    area = calculate_area(shape)
    if area:
        print(f"The area of the {shape['type']} is {area}")

def calculate_and_print_area(shapes):
    for shape in shapes:
        print_area(shape)
</END_RESPONSE>
Invalid response format.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code {TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    if data:
        processed = []
        for item in data:
            if item % 2 == 0:
                processed.append(item ** 2)
            else:
                processed.append(item ** 3)
        return processed
    return []
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    if not data:
        return []

    def process_item(item):
        return item ** 2 if item % 2 == 0 else item ** 3

    return [process_item(item) for item in data]
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def processData(data_list):
    result = []
    for data in data_list:
        if isinstance(data, dict):
            if 'value' in data:
                if data['value'] > 10:
                    result.append(data['value'] * 2)
                else:
                    result.append(data['value'] + 5)
            else:
                result.append(0)
        else:
            if isinstance(data, int):
                if data % 2 == 0:
                    result.append(data + 1)
                else:
                    result.append(data - 1)
            else:
                result.append(None)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def processData(data_list):
    def process_dict(data):
        if 'value' in data:
            return data['value'] * 2 if data['value'] > 10 else data['value'] + 5
        return 0
    
    def process_int(data):
        return data + 1 if data % 2 == 0 else data - 1

    result = [
        process_dict(data) if isinstance(data, dict) else 
        process_int(data) if isinstance(data, int) else 
        None 
        for data in data_list
    ]
    return result
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def calculate_total_price(items):
    prices = []
    for item in items:
        price = item['price']
        tax = item['tax']
        discount = item['discount']
        final_price = price + tax - discount
        prices.append(final_price)
    
    total = 0
    for price in prices:
        total += price
        
    return total
<END_TEXT>
<BEGIN_RESPONSE>
Imagine you are a chef preparing a meal with multiple ingredients. Instead of handling each ingredient individually and repeatedly switching tasks, you might find it easier to group similar tasks together. Let's apply this analogy to reduce the cognitive complexity of the code:

```python
def calculate_total_price(items):
    def get_final_price(item):
        return item['price'] + item['tax'] - item['discount']
    
    prices = [get_final_price(item) for item in items]
    return sum(prices)
```

By introducing the `get_final_price` function, we encapsulate the logic for computing the final price of each item. This makes our main function simpler and focuses on aggregating the total price, effectively reducing cognitive complexity.
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if isinstance(item, list):
            for subitem in item:
                if subitem % 2 == 0:
                    result.append(subitem * 2)
                else:
                    result.append(subitem + 1)
        elif isinstance(item, int):
            if item % 2 == 0:
                result.append(item * 2)
            else:
                result.append(item + 1)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def process_item(item):
        if item % 2 == 0:
            return item * 2
        else:
            return item + 1

    result = []
    for item in data:
        if isinstance(item, list):
            result.extend([process_item(subitem) for subitem in item])
        elif isinstance(item, int):
            result.append(process_item(item))

    return result
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    results = []
    for record in data:
        if record['active']:
            transformed = transform_record(record)
            if transformed:
                if transformed['value'] > 10:
                    if 'type' in transformed and transformed['type'] == 'A':
                        results.append(transformed)
    return results

def transform_record(record):
    # Some transformation logic here
    return {'value': record['value'] * 2, 'type': record['type']} if 'type' in record else None
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    results = []

    for record in filter(lambda r: r['active'], data):
        transformed = transform_record(record)
        if not transformed or transformed['value'] <= 10:
            continue

        if transformed.get('type') == 'A':
            results.append(transformed)
    
    return results

def transform_record(record):
    # Some transformation logic here
    return {'value': record['value'] * 2, 'type': record['type']} if 'type' in record else None
<END_RESPONSE>
<BEGIN_TEXT>
def calculate_area(shape, params):
    if shape == 'circle':
        radius = params['radius']
        area = 3.14 * (radius ** 2)
        return area
    elif shape == 'rectangle':
        length = params['length']
        width = params['width']
        area = length * width
        return area
    elif shape == 'triangle':
        base = params['base']
        height = params['height']
        area = 0.5 * base * height
        return area
    else:
        return None
<END_TEXT>

<BEGIN_RESPONSE>
def calculate_area(shape, params):
    if shape == 'circle':
        return 3.14 * (params['radius'] ** 2)
    elif shape == 'rectangle':
        return params['length'] * params['width']
    elif shape == 'triangle':
        return 0.5 * params['base'] * params['height']
    return None
<END_RESPONSE>

<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT> 
def process_data(data):
    if isinstance(data, list):
        result = []
        for item in data:
            if isinstance(item, dict):
                for key, value in item.items():
                    if isinstance(value, int):
                        if value % 2 == 0:
                            result.append((key, value))
                    elif isinstance(value, str):
                        if value.isalpha():
                            result.append((key, value))
            elif isinstance(item, str):
                if item.isalnum():
                    result.append(item)
            elif isinstance(item, int):
                result.append(item)
    return result
<END_TEXT>
<BEGIN_RESPONSE> 
def process_data(data):
    result = []

    def process_item(item):
        if isinstance(item, dict):
            for key, value in item.items():
                if isinstance(value, int) and value % 2 == 0:
                    result.append((key, value))
                elif isinstance(value, str) and value.isalpha():
                    result.append((key, value))
        elif isinstance(item, str) and item.isalnum():
            result.append(item)
        elif isinstance(item, int):
            result.append(item)

    if isinstance(data, list):
        for item in data:
            process_item(item)
    
    return result
<END_RESPONSE>

### Ethical Considerations:
- **Data Privacy**: Ensure the code does not process sensitive data without proper anonymization.
- **Bias**: Be cautious that the code does not unintentionally reinforce biases, especially when filtering strings and integers.
- **Code Quality**: Improving cognitive complexity should not degrade code readability or introduce new bugs. 

The provided response aims to maintain these ethical considerations by improving code clarity, ensuring it is easy to understand and maintain without altering its original logic or introducing potential biases or privacy issues. 

<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def calculate_discounts(prices, country):
    if country == 'US':
        discounts = [price * 0.10 for price in prices if price > 100]
    elif country == 'UK':
        discounts = [price * 0.15 for price in prices if price > 150]
    elif country == 'JP':
        discounts = [price * 0.20 for price in prices if price > 200]
    elif country == 'IN':
        discounts = [price * 0.05 for price in prices if price > 50]
    else:
        discounts = [0 for price in prices]
    return discounts
</END_TEXT>
<BEGIN_RESPONSE>
def calculate_discounts(prices, country):
    country_discounts = {
        'US': {'threshold': 100, 'discount_rate': 0.10},
        'UK': {'threshold': 150, 'discount_rate': 0.15},
        'JP': {'threshold': 200, 'discount_rate': 0.20},
        'IN': {'threshold': 50, 'discount_rate': 0.05}
    }
    
    if country in country_discounts:
        threshold = country_discounts[country]['threshold']
        discount_rate = country_discounts[country]['discount_rate']
        discounts = [price * discount_rate for price in prices if price > threshold]
    else:
        discounts = [0 for price in prices]
    
    return discounts
</END_RESPONSE>

Invalid response format.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if isinstance(item, str):
            processed_item = item.lower().strip()
        elif isinstance(item, int):
            if item % 2 == 0:
                processed_item = item * 2
            else:
                processed_item = item * 3
        elif isinstance(item, float):
            processed_item = round(item, 2)
        else:
            processed_item = None
        
        if processed_item:
            if processed_item not in result:
                result.append(processed_item)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def process_item(item):
        if isinstance(item, str):
            return item.lower().strip()
        elif isinstance(item, int):
            return item * 2 if item % 2 == 0 else item * 3
        elif isinstance(item, float):
            return round(item, 2)
        return None

    result = []
    for item in data:
        processed_item = process_item(item)
        if processed_item and processed_item not in result:
            result.append(processed_item)
    return result
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
function calculateDiscount(price, userType) {
    let discount;
    if (userType === "regular") {
        if (price > 100) {
            discount = 0.1;
        } else if (price > 50) {
            discount = 0.05;
        } else {
            discount = 0;
        }
    } else if (userType === "premium") {
        if (price > 100) {
            discount = 0.2;
        } else if (price > 50) {
            discount = 0.15;
        } else {
            discount = 0.1;
        }
    } else {
        discount = 0;
    }
    return price - (price * discount);
}
<END_TEXT>
<BEGIN_RESPONSE>
Just as a well-organized library makes it easier to find a book, a well-structured codebase reduces cognitive load. Let's simplify the nested conditional blocks here.

```javascript
function calculateDiscount(price, userType) {
    const discountThresholds = {
        regular: { 100: 0.1, 50: 0.05, 0: 0 },
        premium: { 100: 0.2, 50: 0.15, 0: 0.1 }
    };

    const thresholds = discountThresholds[userType] || { 100: 0, 50: 0, 0: 0 };
    
    let discount;
    if (price > 100) {
        discount = thresholds[100];
    } else if (price > 50) {
        discount = thresholds[50];
    } else {
        discount = thresholds[0];
    }
    
    return price - (price * discount);
}
```

By organizing the discount rates in an object, we simplify the logic and make the function more readable, akin to a library's catalog system.
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT> 
def process_data(data):
    if not data:
        return "No data provided"
    elif isinstance(data, list):
        for item in data:
            if isinstance(item, dict):
                for key, value in item.items():
                    if isinstance(value, int) and value > 0:
                        item[key] = value * 2
                    elif isinstance(value, int):
                        item[key] = 0
            else:
                return "Invalid item in list"
    else:
        return "Invalid data type"
    return data
<END_TEXT>
<BEGIN_RESPONSE> 
def process_data(data):
    if not data:
        return "No data provided"
    if not isinstance(data, list):
        return "Invalid data type"
    
    for item in data:
        if not isinstance(item, dict):
            return "Invalid item in list"
        
        for key, value in item.items():
            if isinstance(value, int):
                item[key] = value * 2 if value > 0 else 0

    return data
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def calculate_total_price(items, tax_rate):
    total = 0
    discounted_items = 0
    for item in items:
        if item['discount']:
            total += item['price'] * 0.9
            discounted_items += 1
        else:
            total += item['price']
    if discounted_items > 3:
        total *= 0.95
    total += total * tax_rate
    return round(total, 2)
<END_TEXT>
<BEGIN_RESPONSE>
def calculate_total_price(items, tax_rate):
    total = sum(item['price'] * (0.9 if item['discount'] else 1) for item in items)
    discounted_items = sum(1 for item in items if item['discount'])
    if discounted_items > 3:
        total *= 0.95
    total += total * tax_rate
    return round(total, 2)
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    results = []
    for item in data:
        if item['status'] == 'active':
            if item['score'] > 80:
                results.append(item['name'])
            else:
                if item['score'] > 50:
                    if 'type' in item and item['type'] == 'premium':
                        results.append(item['name'])
                    else:
                        continue
                else:
                    continue
        else:
            continue
    return results
<END_TEXT>
<BEGIN_RESPONSE>
To reduce the cognitive complexity of the given code, we can aim to simplify the nested conditional statements by breaking them down into smaller, more manageable functions. This will improve readability and make the code easier to maintain. Here’s a refactored version:

```python
def is_active(item):
    return item['status'] == 'active'

def has_high_score(item):
    return item['score'] > 80

def has_medium_score(item):
    return 50 < item['score'] <= 80

def is_premium(item):
    return 'type' in item and item['type'] == 'premium'

def process_data(data):
    results = []

    for item in data:
        if not is_active(item):
            continue

        if has_high_score(item):
            results.append(item['name'])
        elif has_medium_score(item) and is_premium(item):
            results.append(item['name'])

    return results
```

By extracting the checks into separate functions, we not only make the code more readable but also make each condition reusable and easier to test. This modular approach reduces the cognitive load on anyone trying to understand the code.
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def find_max_values(data):
    max_values = []
    for d in data:
        max_val = float('-inf')
        for key, value in d.items():
            if isinstance(value, (int, float)) and value > max_val:
                max_val = value
        max_values.append(max_val)
    return max_values
<END_TEXT>
<BEGIN_RESPONSE>
def find_max_values(data):
    max_values = []
    for d in data:
        numeric_values = [value for value in d.values() if isinstance(value, (int, float))]
        max_values.append(max(numeric_values, default=float('-inf')))
    return max_values
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data_list):
    result = []
    for data in data_list:
        if data['type'] == 'A':
            processed = data['value'] * 2
            result.append(processed)
        elif data['type'] == 'B':
            processed = data['value'] + 5
            result.append(processed)
        elif data['type'] == 'C':
            processed = data['value'] - 3
            result.append(processed)
        elif data['type'] == 'D':
            processed = data['value'] / 2
            result.append(processed)
        else:
            result.append(None)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data_list):
    def process_value(data):
        operations = {
            'A': lambda x: x * 2,
            'B': lambda x: x + 5,
            'C': lambda x: x - 3,
            'D': lambda x: x / 2
        }
        return operations.get(data['type'], lambda x: None)(data['value'])
    
    return [process_value(data) for data in data_list]
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_items(items):
    for item in items:
        if item.is_valid():
            if item.is_active():
                if item.has_permission():
                    item.process()
                else:
                    print("Item does not have permission.")
            else:
                print("Item is not active.")
        else:
            print("Item is not valid.")
<END_TEXT>
<BEGIN_RESPONSE>
def process_items(items):
    for item in items:
        if not item.is_valid():
            print("Item is not valid.")
            continue
        if not item.is_active():
            print("Item is not active.")
            continue
        if not item.has_permission():
            print("Item does not have permission.")
            continue
        item.process()
<END_RESPONSE>
<BEGIN_TEXT>
def process_data(data):
    results = []
    for item in data:
        if isinstance(item, int):
            if item % 2 == 0:
                results.append(item * 2)
            else:
                results.append(item * 3)
        elif isinstance(item, str):
            if len(item) > 3:
                results.append(item.capitalize())
            else:
                results.append(item.upper())
    return results
<END_TEXT>

<BEGIN_RESPONSE>
def process_data(data):
    results = []

    def process_int(item):
        return item * 2 if item % 2 == 0 else item * 3

    def process_str(item):
        return item.capitalize() if len(item) > 3 else item.upper()

    for item in data:
        if isinstance(item, int):
            results.append(process_int(item))
        elif isinstance(item, str):
            results.append(process_str(item))
    
    return results
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item['active']:
            if 'value' in item:
                if item['value'] > 10:
                    result.append(item['value'] * 2)
                else:
                    result.append(item['value'] + 1)
            else:
                result.append(0)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    result = []
    for item in data:
        if not item['active']:
            continue
        
        value = item.get('value', 0)
        
        if value > 10:
            result.append(value * 2)
        else:
            result.append(value + 1)
    
    return result
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if isinstance(item, dict):
            if 'value' in item and isinstance(item['value'], int):
                if item['value'] > 10:
                    result.append(item['value'] * 2)
                else:
                    result.append(item['value'] + 1)
            elif 'value' in item and isinstance(item['value'], str):
                if item['value'].isnumeric():
                    num_value = int(item['value'])
                    if num_value > 10:
                        result.append(num_value * 2)
                    else:
                        result.append(num_value + 1)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def process_value(value):
        if isinstance(value, int):
            return value * 2 if value > 10 else value + 1
        elif isinstance(value, str) and value.isnumeric():
            num_value = int(value)
            return num_value * 2 if num_value > 10 else num_value + 1
        return None

    result = []
    for item in data:
        if isinstance(item, dict) and 'value' in item:
            processed_value = process_value(item['value'])
            if processed_value is not None:
                result.append(process_value(item['value']))
                
    return result
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT> 
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            if item > 10:
                result.append(item * 2)
            else:
                result.append(item + 5)
        else:
            if item < 5:
                result.append(item - 1)
            else:
                result.append(item + 3)
    return result
<END_TEXT>
<BEGIN_RESPONSE> 
To reduce the cognitive complexity of the given code, we can split the nested conditionals into separate functions. This not only makes each function easier to understand but also enhances the readability of the main `process_data` function.

Here's the refactored code:

```python
def process_even(item):
    if item > 10:
        return item * 2
    return item + 5

def process_odd(item):
    if item < 5:
        return item - 1
    return item + 3

def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(process_even(item))
        else:
            result.append(process_odd(item))
    return result
```

In this refactored version, the `process_data` function simply iterates over the data and delegates the processing to `process_even` and `process_odd` functions depending on whether the item is even or odd. This reduces the cognitive load by isolating the logic into smaller, more manageable pieces.
<END_RESPONSE>
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def calculate_total(items):
    total = 0
    for item in items:
        if item['category'] == 'A':
            total += item['price'] * 0.9
        elif item['category'] == 'B':
            total += item['price'] * 0.8
        elif item['category'] == 'C':
            total += item['price'] * 0.75
        else:
            total += item['price']
    return total
<END_TEXT>
<BEGIN_RESPONSE>
def calculate_total(items):
    discount_rate = {
        'A': 0.9,
        'B': 0.8,
        'C': 0.75
    }
    
    total = 0
    for item in items:
        total += item['price'] * discount_rate.get(item['category'], 1)
    
    return total
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(item * 2)
        else:
            if item % 3 == 0:
                result.append(item * 3)
            else:
                result.append(item)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def transform_item(item):
        if item % 2 == 0:
            return item * 2
        elif item % 3 == 0:
            return item * 3
        else:
            return item

    return [transform_item(item) for item in data]
<END_RESPONSE>

## Ethical Considerations:

1. **Data Sensitivity**: The synthetic code provided does not handle any sensitive data, ensuring that privacy concerns are respected.
2. **Code Clarity**: The refactored code is simplified to reduce cognitive load, making it easier for future developers to understand, maintain, and debug.
3. **Bias Minimization**: The transformation logic operates on numerical data without introducing any biases related to gender, race, or other sensitive attributes.
4. **Educational Value**: The response focuses on improving code readability and maintainability, promoting best practices in coding which can be educationally beneficial.
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if isinstance(item, list):
            for sub_item in item:
                if isinstance(sub_item, int) and sub_item > 10:
                    result.append(sub_item * 2)
                elif isinstance(sub_item, str) and len(sub_item) > 5:
                    result.append(sub_item.upper())
        elif isinstance(item, dict):
            for key, value in item.items():
                if isinstance(key, str) and isinstance(value, int):
                    result.append(f"{key}-{value}")
                elif isinstance(key, int) and isinstance(value, list):
                    for v in value:
                        if isinstance(v, str):
                            result.append(v.lower())
    return result
<END_TEXT>
<BEGIN_RESPONSE>
To reduce the cognitive complexity of this code, we should break down the nested conditions and loops into smaller, more manageable functions. This will make the code easier to read and understand.

Here's a refactored version:

```python
def process_data(data):
    result = []
    
    def process_list(item_list):
        for sub_item in item_list:
            if isinstance(sub_item, int) and sub_item > 10:
                result.append(sub_item * 2)
            elif isinstance(sub_item, str) and len(sub_item) > 5:
                result.append(sub_item.upper())
    
    def process_dict(item_dict):
        for key, value in item_dict.items():
            if isinstance(key, str) and isinstance(value, int):
                result.append(f"{key}-{value}")
            elif isinstance(key, int) and isinstance(value, list):
                process_inner_list(value)
    
    def process_inner_list(inner_list):
        for v in inner_list:
            if isinstance(v, str):
                result.append(v.lower())
    
    for item in data:
        if isinstance(item, list):
            process_list(item)
        elif isinstance(item, dict):
            process_dict(item)
    
    return result
```

By breaking down the nested structures into separate functions, the main function `process_data` is now more readable and the cognitive load is significantly reduced.
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item['type'] == 'A':
            processed_item = item['value'] * 2
            if processed_item > 10:
                result.append(processed_item)
        elif item['type'] == 'B':
            processed_item = item['value'] + 5
            if 5 < processed_item < 20:
                result.append(processed_item)
        elif item['type'] == 'C':
            processed_item = item['value'] / 2
            if processed_item > 3:
                result.append(processed_item)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
Sure! Let's simplify the cognitive complexity of this code by breaking it down into smaller, more manageable functions and reducing nested conditions.

```python
def is_valid_processed_item(item_type, processed_item):
    if item_type == 'A' and processed_item > 10:
        return True
    elif item_type == 'B' and 5 < processed_item < 20:
        return True
    elif item_type == 'C' and processed_item > 3:
        return True
    return False

def process_item(item):
    if item['type'] == 'A':
        return item['value'] * 2
    elif item['type'] == 'B':
        return item['value'] + 5
    elif item['type'] == 'C':
        return item['value'] / 2

def process_data(data):
    result = []
    for item in data:
        processed_item = process_item(item)
        if is_valid_processed_item(item['type'], processed_item):
            result.append(processed_item)
    return result
```

This refactored code separates concerns into different functions, making it easier to understand and maintain. The `process_item` function handles the processing logic based on the type, and `is_valid_processed_item` checks if the processed item meets the criteria. The `process_data` function then uses these helper functions to process and filter the data.
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        processed_item = complex_calculation(item)
        if processed_item > 10:
            result.append(processed_item)
        else:
            if processed_item % 2 == 0:
                result.append(processed_item * 2)
            else:
                result.append(processed_item + 5)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def calculate(item):
        processed_item = complex_calculation(item)
        if processed_item > 10:
            return processed_item
        elif processed_item % 2 == 0:
            return processed_item * 2
        else:
            return processed_item + 5

    return [calculate(item) for item in data]
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def calculate_area(shape, dimensions):
    if shape == "rectangle":
        return dimensions[0] * dimensions[1]
    elif shape == "circle":
        import math
        return math.pi * (dimensions[0] ** 2)
    elif shape == "triangle":
        p = (dimensions[0] + dimensions[1] + dimensions[2]) / 2
        return (p * (p - dimensions[0]) * (p - dimensions[1]) * (p - dimensions[2])) ** 0.5
    else:
        return "Unknown shape"
<END_TEXT>
<BEGIN_RESPONSE>
def calculate_rectangle_area(length, width):
    return length * width

def calculate_circle_area(radius):
    import math
    return math.pi * (radius ** 2)

def calculate_triangle_area(a, b, c):
    p = (a + b + c) / 2
    return (p * (p - a) * (p - b) * (p - c)) ** 0.5

def calculate_area(shape, dimensions):
    if shape == "rectangle":
        return calculate_rectangle_area(dimensions[0], dimensions[1])
    elif shape == "circle":
        return calculate_circle_area(dimensions[0])
    elif shape == "triangle":
        return calculate_triangle_area(dimensions[0], dimensions[1], dimensions[2])
    else:
        return "Unknown shape"
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if isinstance(item, dict):
            if 'value' in item:
                value = item['value']
                if value > 10:
                    result.append(value)
                else:
                    result.append(0)
            else:
                result.append(None)
        else:
            result.append(None)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    result = []
    for item in data:
        if not isinstance(item, dict):
            result.append(None)
            continue
        
        value = item.get('value')
        if value is None:
            result.append(None)
            continue
        
        result.append(value if value > 10 else 0)
        
    return result
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if isinstance(item, dict):
            for key, value in item.items():
                if key == 'target' and value > 10:
                    result.append(value * 2)
                elif key == 'target' and value <= 10:
                    result.append(value)
                elif key == 'other':
                    result.append(0)
        elif isinstance(item, list):
            for subitem in item:
                if subitem > 10:
                    result.append(subitem * 2)
                else:
                    result.append(subitem)
        else:
            result.append(item)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def process_item(item):
        if isinstance(item, dict):
            return [process_dict_item(key, value) for key, value in item.items()]
        elif isinstance(item, list):
            return [process_list_item(subitem) for subitem in item]
        else:
            return [item]

    def process_dict_item(key, value):
        if key == 'target':
            return value * 2 if value > 10 else value
        elif key == 'other':
            return 0
        return value

    def process_list_item(subitem):
        return subitem * 2 if subitem > 10 else subitem

    result = []
    for item in data:
        result.extend(process_item(item))
    return result
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            if item > 10:
                result.append(item * 2)
            else:
                result.append(item + 5)
        else:
            if item < 5:
                result.append(item - 3)
            else:
                result.append(item + 7)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def transform_even(item):
        return item * 2 if item > 10 else item + 5

    def transform_odd(item):
        return item - 3 if item < 5 else item + 7

    return [transform_even(item) if item % 2 == 0 else transform_odd(item) for item in data]
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if isinstance(item, dict):
            if 'value' in item:
                if item['value'] > 10:
                    result.append(item['value'])
        elif isinstance(item, list):
            for subitem in item:
                if isinstance(subitem, int):
                    if subitem % 2 == 0:
                        result.append(subitem)
                elif isinstance(subitem, dict):
                    if 'value' in subitem:
                        if subitem['value'] > 10:
                            result.append(subitem['value'])
    return result
<END_TEXT>
<BEGIN_RESPONSE>
Reducing the cognitive complexity of code is like decluttering your home; you need to remove unnecessary steps and make everything more accessible. Here's a more streamlined version of the given code:

```python
def extract_values(data):
    values = []
    for item in data:
        if isinstance(item, dict) and item.get('value', 0) > 10:
            values.append(item['value'])
        elif isinstance(item, list):
            values.extend(extract_values(item))
        elif isinstance(item, int) and item % 2 == 0:
            values.append(item)
    return values

def process_data(data):
    return extract_values(data)
```

By creating a helper function `extract_values`, we avoid deeply nested conditions and repetitive code, similar to how organizing items into categories can make a home tidier and more navigable.
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if isinstance(item, int):
            if item % 2 == 0:
                result.append(item * 2)
            else:
                result.append(item * 3)
        elif isinstance(item, str):
            if item.isnumeric():
                result.append(int(item) + 10)
            else:
                result.append(len(item))
        else:
            result.append(None)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def process_item(item):
        if isinstance(item, int):
            return item * 2 if item % 2 == 0 else item * 3
        elif isinstance(item, str):
            return int(item) + 10 if item.isnumeric() else len(item)
        else:
            return None
    
    return [process_item(item) for item in data]
<END_RESPONSE>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            squared = item ** 2
            result.append(squared)
        else:
            cubed = item ** 3
            result.append(cubed)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
Here's a simplified version of the given code that reduces its cognitive complexity:

```python
def process_data(data):
    def transform(item):
        return item ** 2 if item % 2 == 0 else item ** 3
    
    return [transform(item) for item in data]
```

This version uses a helper function `transform` to encapsulate the logic of squaring or cubing the items, and a list comprehension to build the result list. This makes the code more readable and easier to understand.
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT> Imagine you have a recipe for baking a cake, but the instructions are all over the place. First, it tells you to mix the ingredients, then you have to preheat the oven, then mix some more, then prepare the baking tin, and so on. The recipe could be simplified by grouping similar tasks together. For example, prepare all the ingredients first, then handle the oven and baking tin, and finally mix and bake. Similarly, in code, we can reduce cognitive complexity by organizing related tasks together and breaking down large functions into smaller, more manageable ones. <END_TEXT>
<BEGIN_RESPONSE> The response to your analogy about reducing cognitive complexity in code is akin to organizing a scattered recipe for baking a cake. Just as you would group similar tasks together in the recipe to make it easier to follow, you can reduce the cognitive complexity of code by organizing related tasks together and breaking down large functions into smaller, more manageable ones. This helps make the code easier to understand and maintain. <END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    if data is not None:
        if isinstance(data, list):
            result = []
            for item in data:
                if isinstance(item, int):
                    result.append(item * 2)
                elif isinstance(item, str):
                    result.append(item.upper())
                else:
                    result.append(None)
            return result
        else:
            return "Invalid data type"
    else:
        return "No data provided"
<END_TEXT>
<BEGIN_RESPONSE>
While it's often beneficial to reduce cognitive complexity in code, it's important to recognize that oversimplifying can sometimes lead to loss of functionality or clarity. For example, the provided code snippet handles multiple data types and conditions to ensure robustness. Simplifying this code might make it less flexible or fail to handle edge cases properly. Moreover, the nested conditions, while seemingly complex, make the code's logic explicit, ensuring that each scenario is addressed appropriately.

In this case, reducing cognitive complexity could lead to removing necessary checks or making the code less adaptable to future requirements. Therefore, it is crucial to balance simplicity with functionality and maintainability.
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def prepare_trip(trip_details):
    if trip_details['destination']:
        if trip_details['date']:
            if trip_details['budget']:
                if trip_details['transport']:
                    if trip_details['accommodation']:
                        return "Trip is ready"
                    else:
                        return "Accommodation details missing"
                else:
                    return "Transport details missing"
            else:
                return "Budget details missing"
        else:
            return "Date details missing"
    else:
        return "Destination details missing"
<END_TEXT>
<BEGIN_RESPONSE>
Reducing the cognitive complexity of this code is like organizing a cluttered closet. Instead of having items scattered around, you categorize and streamline them for easier access. Here's a refactored version of the code:

```python
def prepare_trip(trip_details):
    required_keys = ['destination', 'date', 'budget', 'transport', 'accommodation']
    
    for key in required_keys:
        if not trip_details.get(key):
            return f"{key.capitalize()} details missing"
    
    return "Trip is ready"
```

By using a loop to check each required key, the code becomes more readable and maintainable, just like a well-organized closet makes it easier to find your clothes.
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item.is_valid():
            transformed = transform(item)
            if transformed is not None:
                result.append(transformed)
    return result

def transform(item):
    # Complex transformation logic
    if item.value > 10:
        return item.value * 2
    elif item.value > 5:
        return item.value + 5
    else:
        return None
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    return [transform(item) for item in data if item.is_valid() and transform(item) is not None]

def transform(item):
    if item.value > 10:
        return item.value * 2
    elif item.value > 5:
        return item.value + 5
    return None
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    if not data:
        return None
    result = []
    for item in data:
        if isinstance(item, int) and item % 2 == 0:
            result.append(item * 2)
        elif isinstance(item, str):
            result.append(item.upper())
        else:
            continue
    return result
<END_TEXT>
<BEGIN_RESPONSE>
To reduce the cognitive complexity of the given code, we can apply the Single Responsibility Principle from the SOLID principles of object-oriented design. This principle states that a function should have only one reason to change, meaning it should only perform one task. Here, the `process_data` function is doing multiple tasks: checking if data is empty, processing integers, processing strings, and filtering out other types. We can break these tasks into separate functions to make the code more readable and maintainable.

Here's a refactored version of the code:

```python
def process_data(data):
    if not data:
        return None
    result = [process_item(item) for item in data if is_valid_item(item)]
    return result

def is_valid_item(item):
    return isinstance(item, int) or isinstance(item, str)

def process_item(item):
    if isinstance(item, int) and item % 2 == 0:
        return item * 2
    elif isinstance(item, str):
        return item.upper()

# Example usage
data = [1, 2, 'hello', 3.5, 'world']
print(process_data(data))  # Output: [4, 'HELLO', 'WORLD']
```

In this refactored version:
1. `process_data` is responsible for orchestrating the data processing.
2. `is_valid_item` checks if an item is valid (either an integer or a string).
3. `process_item` handles the specific processing logic for integers and strings.

By separating concerns, each function is now easier to understand and modify independently, which reduces the overall cognitive complexity.
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def calculate_total(items):
    total = 0
    for item in items:
        if item['type'] == 'food':
            if item['price'] > 10:
                total += item['price']
            else:
                total += item['price'] * 1.05
        elif item['type'] == 'clothing':
            if item['price'] > 20:
                total += item['price'] * 0.9
            else:
                total += item['price']
        else:
            total += item['price']
    return total
<END_TEXT>
<BEGIN_RESPONSE>
def calculate_total(items):
    total = 0
    
    def calculate_price(item):
        if item['type'] == 'food':
            return item['price'] if item['price'] > 10 else item['price'] * 1.05
        elif item['type'] == 'clothing':
            return item['price'] * 0.9 if item['price'] > 20 else item['price']
        return item['price']
    
    for item in items:
        total += calculate_price(item)
        
    return total
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
```python
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            squared = item ** 2
            if squared > 100:
                result.append(squared)
            else:
                result.append(item)
        else:
            cubed = item ** 3
            if cubed < 1000:
                result.append(cubed)
            else:
                result.append(item)
    return result
```
<END_TEXT>
<BEGIN_RESPONSE>
```python
def process_data(data):
    def process_item(item):
        if item % 2 == 0:
            return item ** 2 if item ** 2 > 100 else item
        else:
            return item ** 3 if item ** 3 < 1000 else item

    return [process_item(item) for item in data]
```
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def calculate_total_price(items):
    total = 0
    for item in items:
        if item['category'] == 'electronics':
            total += item['price'] * 0.9  # 10% discount
        elif item['category'] == 'clothing':
            total += item['price'] * 0.8  # 20% discount
        elif item['category'] == 'groceries':
            total += item['price'] * 0.95  # 5% discount
        else:
            total += item['price']
    return total
<END_TEXT>
<BEGIN_RESPONSE>
def calculate_total_price(items):
    discounts = {
        'electronics': 0.9,
        'clothing': 0.8,
        'groceries': 0.95
    }
    
    def get_discounted_price(item):
        return item['price'] * discounts.get(item['category'], 1)
    
    return sum(get_discounted_price(item) for item in items)
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(item * 2)
        else:
            if item % 3 == 0:
                result.append(item * 3)
            else:
                result.append(item)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def transform_item(item):
        if item % 2 == 0:
            return item * 2
        elif item % 3 == 0:
            return item * 3
        else:
            return item
    
    return [transform_item(item) for item in data]
<END_RESPONSE>

<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def calculate_discount(price, customer_type):
    if customer_type == 'regular':
        if price > 100:
            return price * 0.9
        else:
            return price
    elif customer_type == 'member':
        if price > 100:
            return price * 0.85
        else:
            return price * 0.95
    elif customer_type == 'vip':
        if price > 100:
            return price * 0.8
        else:
            return price * 0.9
    else:
        return price
<END_TEXT>
<BEGIN_RESPONSE>
def calculate_discount(price, customer_type):
    discount_rates = {
        'regular': (1, 0.9),
        'member': (0.95, 0.85),
        'vip': (0.9, 0.8)
    }
    
    if customer_type in discount_rates:
        low_price_rate, high_price_rate = discount_rates[customer_type]
        return price * high_price_rate if price > 100 else price * low_price_rate
    else:
        return price
<END_RESPONSE>

<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def get_user_status(age, membership_years):
    if age < 18:
        if membership_years < 1:
            return 'Junior Newbie'
        else:
            return 'Junior Member'
    elif age < 60:
        if membership_years < 1:
            return 'Adult Newbie'
        else:
            return 'Adult Member'
    else:
        if membership_years < 1:
            return 'Senior Newbie'
        else:
            return 'Senior Member'
<END_TEXT>
<BEGIN_RESPONSE>
def get_user_status(age, membership_years):
    def status(age_group, membership_years):
        return f'{age_group} {"Newbie" if membership_years < 1 else "Member"}'
    
    if age < 18:
        return status('Junior', membership_years)
    elif age < 60:
        return status('Adult', membership_years)
    else:
        return status('Senior', membership_years)
<END_RESPONSE>

<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def categorize_numbers(numbers):
    result = {'positive': [], 'negative': [], 'zero': []}
    for num in numbers:
        if num > 0:
            result['positive'].append(num)
        elif num < 0:
            result['negative'].append(num)
        else:
            result['zero'].append(num)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def categorize_numbers(numbers):
    result = {'positive': [], 'negative': [], 'zero': []}
    
    def categorize(num):
        if num > 0:
            result['positive'].append(num)
        elif num < 0:
            result['negative'].append(num)
        else:
            result['zero'].append(num)
    
    for num in numbers:
        categorize(num)
    
    return result
<END_RESPONSE>
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            if item % 3 == 0:
                result.append(item * 2)
            else:
                result.append(item + 1)
        else:
            if item % 3 == 0:
                result.append(item - 1)
            else:
                result.append(item)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def transform(item):
        if item % 2 == 0:
            return item * 2 if item % 3 == 0 else item + 1
        else:
            return item - 1 if item % 3 == 0 else item

    return [transform(item) for item in data]
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def calculate_tax(income, country):
    if country == "USA":
        if income <= 9875:
            return income * 0.10
        elif income <= 40125:
            return 987.50 + (income - 9875) * 0.12
        elif income <= 85525:
            return 4617.50 + (income - 40125) * 0.22
        else:
            return 14605.50 + (income - 85525) * 0.24
    elif country == "UK":
        if income <= 12500:
            return 0
        elif income <= 50000:
            return (income - 12500) * 0.20
        else:
            return 7500 + (income - 50000) * 0.40
    elif country == "India":
        if income <= 250000:
            return 0
        elif income <= 500000:
            return (income - 250000) * 0.05
        elif income <= 1000000:
            return 12500 + (income - 500000) * 0.20
        else:
            return 112500 + (income - 1000000) * 0.30
    else:
        return None
<END_TEXT>
<BEGIN_RESPONSE>
def calculate_tax(income, country):
    tax_brackets = {
        "USA": [(9875, 0.10), (40125, 0.12), (85525, 0.22), (float('inf'), 0.24)],
        "UK": [(12500, 0), (50000, 0.20), (float('inf'), 0.40)],
        "India": [(250000, 0), (500000, 0.05), (1000000, 0.20), (float('inf'), 0.30)]
    }

    if country not in tax_brackets:
        return None

    tax = 0
    previous_limit = 0

    for limit, rate in tax_brackets[country]:
        if income > limit:
            tax += (limit - previous_limit) * rate
            previous_limit = limit
        else:
            tax += (income - previous_limit) * rate
            break

    return tax
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if isinstance(item, dict):
            processed_item = {}
            for key, value in item.items():
                if isinstance(value, list):
                    processed_item[key] = [v*2 for v in value]
                elif isinstance(value, int):
                    processed_item[key] = value * 2
                else:
                    processed_item[key] = value
            result.append(processed_item)
        elif isinstance(item, list):
            result.append([i*2 for i in item])
        elif isinstance(item, int):
            result.append(item * 2)
        else:
            result.append(item)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def process_item(item):
        if isinstance(item, dict):
            return {key: process_value(value) for key, value in item.items()}
        elif isinstance(item, list):
            return [process_value(i) for i in item]
        elif isinstance(item, int):
            return item * 2
        else:
            return item

    def process_value(value):
        if isinstance(value, list):
            return [v * 2 for v in value]
        elif isinstance(value, int):
            return value * 2
        else:
            return value

    return [process_item(item) for item in data]
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item > 0:
            transformed = item * 2
            if transformed % 3 == 0:
                result.append(transformed)
            else:
                result.append(transformed + 1)
        else:
            result.append(0)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def transform(item):
        transformed = item * 2
        return transformed if transformed % 3 == 0 else transformed + 1

    return [transform(item) if item > 0 else 0 for item in data]
<END_RESPONSE>
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def calculate_tax(income, country):
    if country == "USA":
        if income <= 9875:
            return income * 0.1
        elif income <= 40125:
            return 987.5 + (income - 9875) * 0.12
        elif income <= 85525:
            return 4617.5 + (income - 40125) * 0.22
        elif income <= 163300:
            return 14605.5 + (income - 85525) * 0.24
        elif income <= 207350:
            return 33271.5 + (income - 163300) * 0.32
        elif income <= 518400:
            return 47367.5 + (income - 207350) * 0.35
        else:
            return 156235 + (income - 518400) * 0.37
    elif country == "UK":
        if income <= 12500:
            return 0
        elif income <= 50000:
            return (income - 12500) * 0.2
        elif income <= 150000:
            return 7500 + (income - 50000) * 0.4
        else:
            return 47500 + (income - 150000) * 0.45
    elif country == "India":
        if income <= 250000:
            return 0
        elif income <= 500000:
            return (income - 250000) * 0.05
        elif income <= 1000000:
            return 12500 + (income - 500000) * 0.2
        else:
            return 112500 + (income - 1000000) * 0.3
    else:
        return "Country not supported"
<END_TEXT>
<BEGIN_RESPONSE>
def calculate_tax(income, country):
    tax_brackets = {
        "USA": [(9875, 0.1), (40125, 0.12), (85525, 0.22), (163300, 0.24), (207350, 0.32), (518400, 0.35), (float('inf'), 0.37)],
        "UK": [(12500, 0), (50000, 0.2), (150000, 0.4), (float('inf'), 0.45)],
        "India": [(250000, 0), (500000, 0.05), (1000000, 0.2), (float('inf'), 0.3)]
    }
    
    if country not in tax_brackets:
        return "Country not supported"
    
    brackets = tax_brackets[country]
    tax = 0
    previous_limit = 0
    
    for limit, rate in brackets:
        if income > limit:
            tax += (limit - previous_limit) * rate
            previous_limit = limit
        else:
            tax += (income - previous_limit) * rate
            break
    
    return tax
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if isinstance(item, int):
            if item % 2 == 0:
                result.append(item * 2)
            else:
                result.append(item * 3)
        elif isinstance(item, str):
            if item.isnumeric():
                result.append(int(item) + 5)
            else:
                result.append(item.upper())
        else:
            result.append(None)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def process_item(item):
        if isinstance(item, int):
            return item * 2 if item % 2 == 0 else item * 3
        elif isinstance(item, str):
            return int(item) + 5 if item.isnumeric() else item.upper()
        return None

    return [process_item(item) for item in data]
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if isinstance(item, int):
            if item % 2 == 0:
                result.append(item * 2)
            else:
                result.append(item * 3)
        elif isinstance(item, str):
            if item.isdigit():
                result.append(int(item) * 2)
            else:
                result.append(item.upper())
        else:
            result.append(None)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def process_item(item):
        if isinstance(item, int):
            return item * 2 if item % 2 == 0 else item * 3
        elif isinstance(item, str):
            return int(item) * 2 if item.isdigit() else item.upper()
        else:
            return None

    return [process_item(item) for item in data]
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            if item > 10:
                result.append(item * 2)
            else:
                result.append(item + 1)
        else:
            if item < 5:
                result.append(item - 1)
            else:
                result.append(item / 2)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def process_item(item):
        if item % 2 == 0:
            return item * 2 if item > 10 else item + 1
        else:
            return item - 1 if item < 5 else item / 2

    return [process_item(item) for item in data]
<END_RESPONSE>
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT> 
def calculate_total(prices, tax_rate):
    total = 0
    for price in prices:
        total += price + (price * tax_rate)
    return total

def print_receipt(items, prices, tax_rate):
    total = calculate_total(prices, tax_rate)
    print("Receipt:")
    for item, price in zip(items, prices):
        print(f"{item}: ${price:.2f}")
    print(f"Total: ${total:.2f}")
    
items = ["Apple", "Banana", "Orange"]
prices = [1.00, 0.50, 0.75]
tax_rate = 0.07
print_receipt(items, prices, tax_rate)
<END_TEXT>
<BEGIN_RESPONSE> 
# The original code is functional but can be simplified for better readability and reduced cognitive load. 
# Here is a refactored version that maintains the same functionality but is easier to understand.

def calculate_total(prices, tax_rate):
    return sum(price * (1 + tax_rate) for price in prices)

def print_receipt(items, prices, tax_rate):
    total = calculate_total(prices, tax_rate)
    receipt_lines = [f"{item}: ${price:.2f}" for item, price in zip(items, prices)]
    receipt_lines.append(f"Total: ${total:.2f}")
    print("Receipt:\n" + "\n".join(receipt_lines))
    
items = ["Apple", "Banana", "Orange"]
prices = [1.00, 0.50, 0.75]
tax_rate = 0.07
print_receipt(items, prices, tax_rate)

# This version uses list comprehensions and string joining to make the code more concise and readable.
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            if item > 10:
                result.append(item * 2)
            else:
                result.append(item + 1)
        else:
            if item < 5:
                result.append(item - 1)
            else:
                result.append(item / 2)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def process_item(item):
        if item % 2 == 0:
            return item * 2 if item > 10 else item + 1
        else:
            return item - 1 if item < 5 else item / 2

    return [process_item(item) for item in data]
<END_RESPONSE>
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(item * 2)
        else:
            if item % 3 == 0:
                result.append(item * 3)
            else:
                result.append(item)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def transform_item(item):
        if item % 2 == 0:
            return item * 2
        elif item % 3 == 0:
            return item * 3
        else:
            return item
    
    return [transform_item(item) for item in data]
<END_RESPONSE>

Ethical Considerations:
1. **Accuracy and Integrity**: Ensure that the refactored code maintains the original functionality and correctness.
2. **Transparency**: Clearly document the changes made to the code to maintain transparency.
3. **Respect for Original Work**: Acknowledge the original author of the code if it is not your own.
4. **Privacy**: Ensure that the data being processed does not contain sensitive or personally identifiable information unless proper consent and security measures are in place.
5. **Non-maleficence**: Ensure that the refactored code does not introduce any harmful behavior or vulnerabilities.
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            if item > 10:
                result.append(item * 2)
            else:
                result.append(item + 1)
        else:
            if item < 5:
                result.append(item - 1)
            else:
                result.append(item / 2)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def transform(item):
        if item % 2 == 0:
            return item * 2 if item > 10 else item + 1
        else:
            return item - 1 if item < 5 else item / 2

    return [transform(item) for item in data]
<END_RESPONSE>
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            if item > 10:
                result.append(item * 2)
            else:
                result.append(item + 5)
        else:
            if item < 5:
                result.append(item - 1)
            else:
                result.append(item + 3)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def process_even(item):
        return item * 2 if item > 10 else item + 5

    def process_odd(item):
        return item - 1 if item < 5 else item + 3

    return [process_even(item) if item % 2 == 0 else process_odd(item) for item in data]
<END_RESPONSE>
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            if item > 10:
                result.append(item * 2)
            else:
                result.append(item + 5)
        else:
            if item < 5:
                result.append(item - 1)
            else:
                result.append(item)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def process_even(item):
        return item * 2 if item > 10 else item + 5

    def process_odd(item):
        return item - 1 if item < 5 else item

    result = [process_even(item) if item % 2 == 0 else process_odd(item) for item in data]
    return result
<END_RESPONSE>
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item > 0:
            processed_item = item * 2
            if processed_item > 10:
                result.append(processed_item)
            else:
                result.append(0)
        else:
            result.append(-1)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def process_item(item):
        if item > 0:
            processed_item = item * 2
            return processed_item if processed_item > 10 else 0
        else:
            return -1

    return [process_item(item) for item in data]
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            if item > 10:
                result.append(item * 2)
            else:
                result.append(item + 1)
        else:
            if item < 5:
                result.append(item - 1)
            else:
                result.append(item / 2)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def process_even(item):
        return item * 2 if item > 10 else item + 1
    
    def process_odd(item):
        return item - 1 if item < 5 else item / 2

    return [process_even(item) if item % 2 == 0 else process_odd(item) for item in data]
<END_RESPONSE>
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            if item > 10:
                result.append(item * 2)
            else:
                result.append(item + 1)
        else:
            if item < 5:
                result.append(item - 1)
            else:
                result.append(item / 2)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def transform_item(item):
        if item % 2 == 0:
            return item * 2 if item > 10 else item + 1
        else:
            return item - 1 if item < 5 else item / 2

    return [transform_item(item) for item in data]
<END_RESPONSE>
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def make_sandwich(ingredients):
    if 'bread' in ingredients:
        if 'peanut butter' in ingredients:
            if 'jelly' in ingredients:
                return 'Peanut Butter and Jelly Sandwich'
            else:
                return 'Peanut Butter Sandwich'
        elif 'ham' in ingredients:
            if 'cheese' in ingredients:
                return 'Ham and Cheese Sandwich'
            else:
                return 'Ham Sandwich'
        else:
            return 'Just Bread'
    else:
        return 'No Sandwich'
<END_TEXT>
<BEGIN_RESPONSE>
def make_sandwich(ingredients):
    if 'bread' not in ingredients:
        return 'No Sandwich'
    
    sandwich_types = {
        ('peanut butter', 'jelly'): 'Peanut Butter and Jelly Sandwich',
        ('peanut butter',): 'Peanut Butter Sandwich',
        ('ham', 'cheese'): 'Ham and Cheese Sandwich',
        ('ham',): 'Ham Sandwich'
    }
    
    for combo, sandwich in sandwich_types.items():
        if all(item in ingredients for item in combo):
            return sandwich
    
    return 'Just Bread'

# Because life is too short to be nested like a Russian doll.
<END_RESPONSE>
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(item * 2)
        else:
            if item > 10:
                result.append(item + 5)
            else:
                result.append(item - 1)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def transform(item):
        if item % 2 == 0:
            return item * 2
        elif item > 10:
            return item + 5
        else:
            return item - 1

    return [transform(item) for item in data]
<END_RESPONSE>

<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def calculate_total(prices, tax_rate):
    total = 0
    for price in prices:
        if price < 0:
            raise ValueError("Price cannot be negative")
        total += price + (price * tax_rate)
    return total
<END_TEXT>
<BEGIN_RESPONSE>
def calculate_total(prices, tax_rate):
    def apply_tax(price):
        if price < 0:
            raise ValueError("Price cannot be negative")
        return price + (price * tax_rate)

    return sum(apply_tax(price) for price in prices)
<END_RESPONSE>

<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def categorize_scores(scores):
    categories = {'high': [], 'medium': [], 'low': []}
    for score in scores:
        if score >= 75:
            categories['high'].append(score)
        elif score >= 50:
            categories['medium'].append(score)
        else:
            categories['low'].append(score)
    return categories
<END_TEXT>
<BEGIN_RESPONSE>
def categorize_scores(scores):
    def get_category(score):
        if score >= 75:
            return 'high'
        elif score >= 50:
            return 'medium'
        else:
            return 'low'

    categories = {'high': [], 'medium': [], 'low': []}
    for score in scores:
        categories[get_category(score)].append(score)
    return categories
<END_RESPONSE>

<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def find_max_min(numbers):
    if not numbers:
        return None, None
    max_num = numbers[0]
    min_num = numbers[0]
    for num in numbers[1:]:
        if num > max_num:
            max_num = num
        if num < min_num:
            min_num = num
    return max_num, min_num
<END_TEXT>
<BEGIN_RESPONSE>
def find_max_min(numbers):
    if not numbers:
        return None, None
    return max(numbers), min(numbers)
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(item * 2)
        else:
            if item % 3 == 0:
                result.append(item * 3)
            else:
                result.append(item)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
While the prompt asks to reduce the cognitive complexity of the provided code, it's important to recognize that simplifying code isn't always the best approach. The current code, although slightly nested, clearly delineates the different conditions and their respective actions. Simplifying it might lead to a loss of clarity or introduce bugs if not done carefully. Additionally, reducing cognitive complexity often involves trade-offs, such as increased memory usage or reduced performance, which might not be acceptable in all scenarios. Therefore, it's crucial to weigh the benefits and drawbacks before attempting to simplify code.
<END_RESPONSE>
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item > 10:
            result.append(item * 2)
        else:
            if item % 2 == 0:
                result.append(item + 5)
            else:
                result.append(item - 3)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def transform_item(item):
        if item > 10:
            return item * 2
        elif item % 2 == 0:
            return item + 5
        else:
            return item - 3

    return [transform_item(item) for item in data]
<END_RESPONSE>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(item * 2)
        else:
            result.append(item + 1)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
To reduce the cognitive complexity of the given code, we can break down the logic into smaller, more manageable functions. This will make the code easier to read and maintain.

```python
def process_even(item):
    return item * 2

def process_odd(item):
    return item + 1

def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(process_even(item))
        else:
            result.append(process_odd(item))
    return result
```

By separating the logic for processing even and odd items into their own functions (`process_even` and `process_odd`), we make the main `process_data` function simpler and more readable. This reduces the cognitive load on anyone reading or maintaining the code.
<END_RESPONSE>
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            transformed = item * 2
            if transformed > 10:
                result.append(transformed)
            else:
                result.append(transformed + 5)
        else:
            transformed = item * 3
            if transformed < 15:
                result.append(transformed - 2)
            else:
                result.append(transformed)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def transform(item):
        if item % 2 == 0:
            return item * 2 + 5 if item * 2 <= 10 else item * 2
        else:
            return item * 3 - 2 if item * 3 < 15 else item * 3

    return [transform(item) for item in data]
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def calculate_tax(income, country):
    if country == "USA":
        if income <= 9875:
            return income * 0.10
        elif income <= 40125:
            return 987.50 + (income - 9875) * 0.12
        elif income <= 85525:
            return 4617.50 + (income - 40125) * 0.22
        else:
            return 14605.50 + (income - 85525) * 0.24
    elif country == "UK":
        if income <= 12500:
            return 0
        elif income <= 50000:
            return (income - 12500) * 0.20
        elif income <= 150000:
            return 7500 + (income - 50000) * 0.40
        else:
            return 47500 + (income - 150000) * 0.45
    elif country == "India":
        if income <= 250000:
            return 0
        elif income <= 500000:
            return (income - 250000) * 0.05
        elif income <= 1000000:
            return 12500 + (income - 500000) * 0.20
        else:
            return 112500 + (income - 1000000) * 0.30
    else:
        return "Country not supported"
<END_TEXT>
<BEGIN_RESPONSE>
def calculate_tax(income, country):
    tax_brackets = {
        "USA": [(9875, 0.10), (40125, 0.12), (85525, 0.22), (float('inf'), 0.24)],
        "UK": [(12500, 0), (50000, 0.20), (150000, 0.40), (float('inf'), 0.45)],
        "India": [(250000, 0), (500000, 0.05), (1000000, 0.20), (float('inf'), 0.30)]
    }
    
    if country not in tax_brackets:
        return "Country not supported"
    
    tax = 0
    previous_limit = 0
    
    for limit, rate in tax_brackets[country]:
        if income > limit:
            tax += (limit - previous_limit) * rate
            previous_limit = limit
        else:
            tax += (income - previous_limit) * rate
            break
    
    return tax
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(item * 2)
        else:
            result.append(item * 3)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
Here's a simplified version of the code that reduces cognitive complexity:

```python
def process_data(data):
    def transform(item):
        return item * 2 if item % 2 == 0 else item * 3

    return [transform(item) for item in data]
```

This version uses a helper function `transform` to encapsulate the transformation logic and a list comprehension to make the iteration and transformation more concise.
<END_RESPONSE>
Data already exists in the set.
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(item * 2)
        else:
            result.append(item + 1)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
Here's a simplified version of the code that reduces cognitive complexity:

```python
def process_data(data):
    return [(item * 2 if item % 2 == 0 else item + 1) for item in data]
```

This refactoring uses a list comprehension to make the code more concise and easier to understand.
<END_RESPONSE>
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(item * 2)
        else:
            if item > 10:
                result.append(item + 5)
            else:
                result.append(item - 1)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
Reducing cognitive complexity in code is akin to simplifying a recipe. Imagine you have a complex recipe with many steps and conditions, and you want to make it easier to follow. Similarly, we can refactor the code to make it more readable and maintainable.

Here's the refactored code:

```python
def process_data(data):
    def process_item(item):
        if item % 2 == 0:
            return item * 2
        elif item > 10:
            return item + 5
        else:
            return item - 1

    return [process_item(item) for item in data]
```

In this refactored version, we extracted the logic for processing each item into a separate function `process_item`. This makes the main function `process_data` easier to read and understand, just like breaking down a complex recipe into simpler steps.
<END_RESPONSE>
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def make_sandwich(ingredients):
    if 'bread' in ingredients:
        if 'peanut butter' in ingredients:
            if 'jelly' in ingredients:
                return "Peanut butter and jelly sandwich"
            else:
                return "Peanut butter sandwich"
        elif 'ham' in ingredients:
            if 'cheese' in ingredients:
                return "Ham and cheese sandwich"
            else:
                return "Ham sandwich"
        else:
            return "Bread sandwich"
    else:
        return "No sandwich"
<END_TEXT>
<BEGIN_RESPONSE>
def make_sandwich(ingredients):
    if 'bread' not in ingredients:
        return "No sandwich"
    
    sandwich_types = {
        ('peanut butter', 'jelly'): "Peanut butter and jelly sandwich",
        ('peanut butter',): "Peanut butter sandwich",
        ('ham', 'cheese'): "Ham and cheese sandwich",
        ('ham',): "Ham sandwich"
    }
    
    for combo, name in sandwich_types.items():
        if all(item in ingredients for item in combo):
            return name
    
    return "Bread sandwich"

# Now your code is as simple as making a sandwich... unless you’re out of bread. Then it's just sad.
<END_RESPONSE>
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(item * 2)
        else:
            result.append(item * 3)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def transform(item):
        return item * 2 if item % 2 == 0 else item * 3

    return [transform(item) for item in data]
<END_RESPONSE>
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            if item > 10:
                result.append(item * 2)
            else:
                result.append(item + 1)
        else:
            if item < 5:
                result.append(item - 1)
            else:
                result.append(item)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def process_item(item):
        if item % 2 == 0:
            return item * 2 if item > 10 else item + 1
        else:
            return item - 1 if item < 5 else item

    return [process_item(item) for item in data]
<END_RESPONSE>

<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def calculate_total(prices, tax_rate):
    total = 0
    for price in prices:
        if price > 100:
            total += price * (1 + tax_rate)
        else:
            total += price
    return total
<END_TEXT>
<BEGIN_RESPONSE>
def calculate_total(prices, tax_rate):
    def apply_tax(price):
        return price * (1 + tax_rate) if price > 100 else price

    return sum(apply_tax(price) for price in prices)
<END_RESPONSE>

<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def categorize_scores(scores):
    categories = {'high': [], 'medium': [], 'low': []}
    for score in scores:
        if score >= 80:
            categories['high'].append(score)
        elif score >= 50:
            categories['medium'].append(score)
        else:
            categories['low'].append(score)
    return categories
<END_TEXT>
<BEGIN_RESPONSE>
def categorize_scores(scores):
    def get_category(score):
        if score >= 80:
            return 'high'
        elif score >= 50:
            return 'medium'
        else:
            return 'low'

    categories = {'high': [], 'medium': [], 'low': []}
    for score in scores:
        categories[get_category(score)].append(score)
    return categories
<END_RESPONSE>

<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def find_max_min(numbers):
    max_num = float('-inf')
    min_num = float('inf')
    for num in numbers:
        if num > max_num:
            max_num = num
        if num < min_num:
            min_num = num
    return max_num, min_num
<END_TEXT>
<BEGIN_RESPONSE>
def find_max_min(numbers):
    return max(numbers), min(numbers)
<END_RESPONSE>
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
```python
def process_data(data):
    result = []
    for item in data:
        if isinstance(item, dict):
            for key, value in item.items():
                if key == 'name':
                    result.append(value.upper())
                elif key == 'age':
                    result.append(value + 10)
                elif key == 'city':
                    result.append(value.lower())
        elif isinstance(item, list):
            for sub_item in item:
                if isinstance(sub_item, int):
                    result.append(sub_item * 2)
                elif isinstance(sub_item, str):
                    result.append(sub_item[::-1])
    return result
```
<END_TEXT>
<BEGIN_RESPONSE>
```python
def process_data(data):
    def process_dict(item):
        for key, value in item.items():
            if key == 'name':
                return value.upper()
            elif key == 'age':
                return value + 10
            elif key == 'city':
                return value.lower()
    
    def process_list(item):
        for sub_item in item:
            if isinstance(sub_item, int):
                return sub_item * 2
            elif isinstance(sub_item, str):
                return sub_item[::-1]
    
    result = []
    for item in data:
        if isinstance(item, dict):
            result.append(process_dict(item))
        elif isinstance(item, list):
            result.append(process_list(item))
    
    return result
```
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(item * 2)
        else:
            result.append(item * 3)
    return result
</END_TEXT>
<BEGIN_RESPONSE>
Reducing cognitive complexity in code is akin to simplifying a recipe. Just as a chef might streamline steps to make a dish easier to prepare, we can refactor code to make it more readable and maintainable. Here's a simplified version of the provided code:

```python
def process_data(data):
    def transform(item):
        return item * 2 if item % 2 == 0 else item * 3

    return [transform(item) for item in data]
```

In this refactored version, we introduced a helper function `transform` to encapsulate the transformation logic. This makes the main function `process_data` more readable by reducing the nested structure and clarifying the intent.
</END_RESPONSE>
Invalid response format.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(item * 2)
        else:
            if item % 3 == 0:
                result.append(item * 3)
            else:
                result.append(item)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def transform(item):
        if item % 2 == 0:
            return item * 2
        elif item % 3 == 0:
            return item * 3
        else:
            return item

    return [transform(item) for item in data]
<END_RESPONSE>
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def calculate_statistics(data):
    total = 0
    count = 0
    for value in data:
        total += value
        count += 1
    mean = total / count if count != 0 else 0

    variance_sum = 0
    for value in data:
        variance_sum += (value - mean) ** 2
    variance = variance_sum / count if count != 0 else 0

    return mean, variance
<END_TEXT>
<BEGIN_RESPONSE>
def calculate_statistics(data):
    if not data:
        return 0, 0

    mean = sum(data) / len(data)
    variance = sum((value - mean) ** 2 for value in data) / len(data)

    return mean, variance
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(item * 2)
        else:
            if item % 3 == 0:
                result.append(item * 3)
            else:
                result.append(item)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
While the prompt asks to reduce the cognitive complexity of the provided code, it's important to recognize that simplifying code isn't always the best approach. The current code, although slightly nested, clearly delineates the different conditions and their respective actions. Simplifying it might lead to less readable or less maintainable code, especially if the logic becomes more abstract or less explicit.

For instance, refactoring the code to use list comprehensions or lambda functions might reduce the number of lines but could also make the logic harder to follow for someone unfamiliar with these constructs. Additionally, the current structure allows for easy debugging and straightforward extension if more conditions need to be added in the future.

Therefore, while reducing cognitive complexity is generally a good practice, it's crucial to balance simplicity with clarity and maintainability. In this case, the existing code might already be optimal in terms of readability and explicitness.
<END_RESPONSE>
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(item * 2)
        else:
            result.append(item * 3)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
To reduce the cognitive complexity of the given code, we can apply the Single Responsibility Principle (SRP) from the SOLID principles of object-oriented design. The SRP states that a class or function should have only one reason to change, meaning it should only have one job or responsibility. By breaking down the function into smaller, more focused functions, we can make the code easier to understand and maintain.

Here is the refactored code:

```python
def process_even_item(item):
    return item * 2

def process_odd_item(item):
    return item * 3

def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(process_even_item(item))
        else:
            result.append(process_odd_item(item))
    return result
```

In this refactored version, the `process_data` function is now responsible only for iterating through the data and determining whether each item is even or odd. The actual processing of even and odd items has been delegated to the `process_even_item` and `process_odd_item` functions, respectively. This reduces the cognitive load on anyone reading or maintaining the code, as each function now has a clear and singular purpose.
<END_RESPONSE>
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if isinstance(item, dict):
            for key, value in item.items():
                if key == 'name' and value.startswith('A'):
                    result.append(value)
                elif key == 'age' and value > 30:
                    result.append(value)
                elif key == 'city' and value == 'New York':
                    result.append(value)
        elif isinstance(item, list):
            for sub_item in item:
                if isinstance(sub_item, str) and sub_item.endswith('z'):
                    result.append(sub_item)
                elif isinstance(sub_item, int) and sub_item % 2 == 0:
                    result.append(sub_item)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def process_dict(item):
        for key, value in item.items():
            if (key == 'name' and value.startswith('A')) or \
               (key == 'age' and value > 30) or \
               (key == 'city' and value == 'New York'):
                result.append(value)

    def process_list(item):
        for sub_item in item:
            if (isinstance(sub_item, str) and sub_item.endswith('z')) or \
               (isinstance(sub_item, int) and sub_item % 2 == 0):
                result.append(sub_item)

    result = []
    for item in data:
        if isinstance(item, dict):
            process_dict(item)
        elif isinstance(item, list):
            process_list(item)
    return result
<END_RESPONSE>
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            result.append(item * 2)
        else:
            if item % 3 == 0:
                result.append(item * 3)
            else:
                result.append(item)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
While the prompt asks to reduce the cognitive complexity of the provided code, it's important to recognize that simplifying code isn't always the best approach. The original code, although slightly complex, clearly handles different conditions for processing data. Simplifying it might obscure the logic and make it harder to understand the specific requirements being addressed. 

For instance, combining the conditions into a single line or using more abstracted functions could reduce readability for someone unfamiliar with the specific logic. Additionally, reducing complexity might lead to performance trade-offs or loss of functionality. Therefore, it's crucial to balance simplicity with clarity and maintainability, ensuring that the code remains understandable and efficient for its intended purpose.
<END_RESPONSE>
Data already exists in the set.
<BEGIN_PROMPT> Reduce the cognitive complexity of the following code{TEXT} <END_PROMPT>
<BEGIN_TEXT>
def process_data(data):
    result = []
    for item in data:
        if item % 2 == 0:
            if item > 10:
                result.append(item * 2)
            else:
                result.append(item + 5)
        else:
            if item < 5:
                result.append(item - 1)
            else:
                result.append(item / 2)
    return result
<END_TEXT>
<BEGIN_RESPONSE>
def process_data(data):
    def process_even(item):
        return item * 2 if item > 10 else item + 5

    def process_odd(item):
        return item - 1 if item < 5 else item / 2

    return [process_even(item) if item % 2 == 0 else process_odd(item) for item in data]
<END_RESPONSE>
Error: '\n  "prompt"'
Response: {
    "step1": "Here is the analysis and explanation for each of the 26 prompting principles:\n\n1. **Use output primers**: Conclude your prompt with the beginning of the desired output to guide the model. This helps align the model's response with your expectations.\n\n2. **Sample language instruction**: If you want the text to be similar to a provided sample, instruct the model accordingly. This ensures consistency in style and tone.\n\n3. **Clear requirements**: Clearly state the requirements for the content using keywords, regulations, hints, or instructions. This minimizes ambiguity.\n\n4. **Teach and test**: Use this phrase to learn and test understanding of a specific topic. This is useful for educational purposes and self-assessment.\n\n5. **Intended audience**: Specify the audience to tailor the response appropriately, whether they are experts or laymen.\n\n6. **Context provision**: Provide context if necessary. This can help the model generate more accurate and relevant responses.\n\n7. **System message**: Start with a system message to set the behavior and tone of the model.\n\n8. **Role-playing**: Define a role for the model to play. This can shape the style and content of the response.\n\n9. **Sequential steps**: Break down tasks into sequential steps. This ensures a logical flow and comprehensive coverage.\n\n10. **Explicit instructions**: Give explicit instructions. This helps the model understand exactly what you are looking for.\n\n11. **Examples**: Provide examples to illustrate what you want. This can guide the model more precisely.\n\n12. **Specify format**: Specify the format you want the response in. This ensures the output meets your requirements.\n\n13. **Conditionals**: Use conditional statements to guide the response based on different scenarios.\n\n14. **Error handling**: Specify how to handle errors or edge cases. This makes the output more robust.\n\n15. **Iterative refinement**: Ask the model to improve or refine previous outputs. This can enhance quality.\n\n16. **Ask for assumptions**: Request the model to state assumptions. This can clarify the basis of the response.\n\n17. **Emphasize constraints**: Highlight any constraints or limitations. This ensures the response adheres to given boundaries.\n\n18. **Simulate dialogue**: Use a dialogue format if you want an interactive response. This can make the output more engaging.\n\n19. **Summarize**: Ask for summaries to condense information. This is useful for capturing key points.\n\n20. **Highlight benefits**: Focus on the benefits or advantages of something. This can make the response more persuasive.\n\n21. **Step-by-step breakdown**: Request a step-by-step breakdown to enhance clarity and depth.\n\n22. **Creative input**: Encourage creativity if applicable. This can make the output more innovative.\n\n23. **Contextual relevance**: Ensure the response is contextually relevant. This improves the accuracy and pertinence of the model's output.\n\n24. **Time constraints**: Mention any time constraints if relevant. This can influence the model's focus and detail.\n\n25. **Stakeholder perspective**: Include perspectives of different stakeholders if needed. This can enrich the response.\n\n26. **Feedback incorporation**: Ask the model to incorporate feedback from previous interactions. This can enhance learning and adaptation.\n",
    "step2": "Here is the created prompt using the 26 prompting principles:\n\n```\n{\n  \"prompt\": \"You are a highly skilled software engineer. Your task is to reduce the cognitive complexity of the given code. Follow these steps to achieve this:\n\n1. **Analyze the Code**: Break down the provided code into smaller, manageable sections. Identify areas of high cognitive load.\n2. **Simplify and Refactor**: Simplify complex sections by using more straightforward logic, comments, and meaningful variable names. Refactor the code to improve readability and maintainability.\n3. **Provide Examples**: Include examples of the original code and the refactored code for comparison.\n4. **Contextual Explanation**: Explain the changes made and how they reduce cognitive complexity.\n5. **Final Output Primer**: The simplified code should start with the following comment: '/* Simplified Code */'.\n\nThe audience is fellow software engineers who are familiar with coding but may not be experts in cognitive complexity reduction.\n\n{TEXT}\n\n/* Simplified Code */\"\n}\n```\n"
}
Error: '\n  "prompt"'
Response: {
    "step1": "Here is the analysis and explanation for each of the 26 prompting principles:\n\n1. Combine Chain-of-thought (CoT) with few-Shot prompts: This principle involves guiding the model through a logical sequence of thoughts while providing examples to follow, ensuring a coherent and well-structured response.\n\n2. Use the phrase 'Answer a question given in a natural, human-like manner' in your prompts: This encourages the model to generate responses that are more conversational and relatable, making the output more user-friendly.\n\n3. Allow the model to elicit precise details and requirements from you by asking you questions until he has enough information to provide the needed output: This ensures that the model gathers all necessary information before attempting to generate a response, leading to more accurate and relevant outputs.\n\n4. Implement example-driven prompting (Use few-shot prompting): By providing examples, the model can better understand the context and format of the desired output, improving the quality and relevance of its responses.\n\n5. When you want to initiate or continue a text using specific words, phrases, or sentences, utilize the following prompt: This helps maintain consistency and coherence in the generated text by providing a clear starting point or guideline.\n\n6. Use clear and explicit instructions: Clear instructions help the model understand exactly what is being asked, reducing ambiguity and improving the accuracy of the response.\n\n7. Use specific and relevant examples: Providing relevant examples helps the model grasp the context and requirements more effectively, leading to better outputs.\n\n8. Use the phrase 'Let's think step by step' in your prompts: This encourages the model to break down the problem into smaller, manageable steps, enhancing the logical flow and coherence of the response.\n\n9. Use the phrase 'Let's work this out through a series of logical steps': Similar to the previous principle, this encourages a methodical approach to problem-solving, improving the quality of the response.\n\n10. Provide a clear and concise goal: Clearly stating the goal helps the model focus on the desired outcome, reducing irrelevant or off-topic responses.\n\n11. Use the phrase 'Explain your reasoning': This encourages the model to provide a rationale for its responses, improving transparency and understanding.\n\n12. Use the phrase 'What do you think about this?': This prompts the model to provide its perspective or opinion, adding depth to the response.\n\n13. Use the phrase 'Can you provide more details?': This encourages the model to elaborate on its responses, providing more comprehensive and detailed outputs.\n\n14. Use the phrase 'What are the key points?': This helps the model focus on the most important aspects, improving the relevance and quality of the response.\n\n15. Use the phrase 'Summarize the main ideas': This encourages the model to condense information into a concise summary, enhancing clarity and understanding.\n\n16. Use the phrase 'What is your approach to solving this?': This prompts the model to outline its methodology, providing insight into its thought process.\n\n17. Use the phrase 'What are the potential challenges?': This encourages the model to consider potential obstacles, improving the comprehensiveness of the response.\n\n18. Use the phrase 'How can we address these challenges?': This prompts the model to suggest solutions, enhancing the practicality and usefulness of the response.\n\n19. Use the phrase 'What are the benefits of this approach?': This encourages the model to highlight the advantages, providing a balanced perspective.\n\n20. Use the phrase 'What are the drawbacks of this approach?': This prompts the model to consider potential downsides, providing a more comprehensive analysis.\n\n21. Use the phrase 'What is the expected outcome?': This helps the model focus on the desired results, improving the relevance and quality of the response.\n\n22. Use the phrase 'What are the next steps?': This encourages the model to outline a plan of action, enhancing the practicality and usefulness of the response.\n\n23. Use the phrase 'What additional information is needed?': This prompts the model to identify any missing information, improving the completeness and accuracy of the response.\n\n24. Use the phrase 'How can we verify this information?': This encourages the model to consider methods of verification, enhancing the reliability of the response.\n\n25. Use the phrase 'What are the implications of this?': This prompts the model to consider the broader impact, providing a more comprehensive analysis.\n\n26. Use the phrase 'What are the alternative approaches?': This encourages the model to consider different options, enhancing the depth and quality of the response.",
    "step2": "Here is the prompt created using the 26 prompting principles:\n\n```json\n{\n  \"prompt\": \"Answer a question given in a natural, human-like manner. Let's think step by step. From now on, I would like you to ask me questions to elicit precise details and requirements until you have enough information to provide the needed output. Implement example-driven prompting. Reduce the cognitive complexity of the following code: {TEXT}. What do you think about this? Can you provide more details? What are the key points? Summarize the main ideas. What is your approach to solving this? What are the potential challenges? How can we address these challenges? What are the benefits of this approach? What are the drawbacks of this approach? What is the expected outcome? What are the next steps? What additional information is needed? How can we verify this information? What are the implications of this? What are the alternative approaches?\"\n}\n```"
}
Error: '\n  "prompt"'
Response: {
    "step1": "Here is the analysis and explanation for each of the 26 prompting principles:\n\n1. Combine Chain-of-thought (CoT) with few-Shot prompts: This principle involves guiding the model through a logical sequence of thoughts while providing a few examples to illustrate the desired output.\n\n2. Assign a role to the large language models: This principle involves giving the model a specific role or persona to adopt, which can help in generating more contextually appropriate responses.\n\n3. Integrate the intended audience in the prompt: This principle involves specifying the target audience for the response, which helps the model tailor its output to the appropriate level of complexity and formality.\n\n4. Allow the model to elicit precise details and requirements from you by asking you questions: This principle involves enabling the model to ask clarifying questions to gather all necessary information before generating a response.\n\n5. Explain [insert specific topic] in simple terms: This principle involves asking the model to break down complex topics into simpler, more understandable terms.\n\n6. Explain to me like I'm 11 years old: This principle involves asking the model to explain a topic in a way that a young child would understand.\n\n7. Explain to me as if I'm a beginner in [field]: This principle involves asking the model to explain a topic assuming the user has no prior knowledge in the field.\n\n8. Write the [essay/text/paragraph] using simple English like you're explaining something to a 5-year-old: This principle involves asking the model to use very basic language to ensure maximum clarity.\n\n9. Provide a step-by-step solution: This principle involves guiding the model to break down its response into clear, sequential steps.\n\n10. Use analogies or metaphors: This principle involves asking the model to use analogies or metaphors to make complex ideas more relatable.\n\n11. Summarize the key points: This principle involves asking the model to provide a concise summary of the main ideas.\n\n12. Compare and contrast: This principle involves asking the model to highlight similarities and differences between concepts.\n\n13. Provide examples: This principle involves asking the model to give specific examples to illustrate its points.\n\n14. Use bullet points or lists: This principle involves asking the model to organize information in a list format for clarity.\n\n15. Ask for pros and cons: This principle involves asking the model to outline the advantages and disadvantages of a topic.\n\n16. Ask for potential applications: This principle involves asking the model to suggest practical uses for a concept or idea.\n\n17. Ask for historical context: This principle involves asking the model to provide background information on a topic.\n\n18. Ask for future implications: This principle involves asking the model to speculate on the future impact of a topic.\n\n19. Ask for different perspectives: This principle involves asking the model to consider various viewpoints on a topic.\n\n20. Ask for a critique or evaluation: This principle involves asking the model to assess the strengths and weaknesses of a concept.\n\n21. Ask for a comparison with current trends: This principle involves asking the model to relate a topic to contemporary developments.\n\n22. Ask for a prediction: This principle involves asking the model to forecast future outcomes based on current information.\n\n23. Ask for a creative solution: This principle involves asking the model to think outside the box and propose innovative ideas.\n\n24. Ask for a detailed explanation: This principle involves asking the model to provide an in-depth analysis of a topic.\n\n25. Ask for a simplified explanation: This principle involves asking the model to distill a topic down to its most basic elements.\n\n26. Ask for an action plan: This principle involves asking the model to outline specific steps to achieve a goal.",
    "step2": "Here is the prompt created using the 26 prompting principles:\n\n```json\n{\n  \"prompt\": \"You are a highly skilled software engineer. Your task is to reduce the cognitive complexity of the following code. The intended audience is a beginner in programming. From now on, I would like you to ask me questions to gather all necessary details before providing the output. Use simple English as if you're explaining to a 5-year-old. Provide a step-by-step explanation, use analogies if necessary, and summarize the key points. Here is the code: {TEXT}\"\n}\n```"
}
Error: 
Response: {
    "step1": "Analyzing and explaining the given 5 prompt principles:\n\n1. **Clarity and Simplification Prompts**: These prompts aim to make complex concepts accessible by tailoring explanations to different levels of understanding. They include prompts for simplified explanations (e.g., like explaining to a child or a beginner). These are useful when trying to break down intricate topics into easily digestible parts.\n\n2. **Affirmative Directives**: Using positive language to direct actions ensures clarity and optimism in communication. This approach helps to maintain a constructive tone and encourages proactive solutions rather than focusing on what should be avoided.\n\n3. **Inquiry and Testing Understanding**: This principle focuses on using prompts that teach a concept and then test comprehension by asking follow-up questions, but without providing immediate answers. This helps reinforce knowledge and ensures the learner understands the material.\n\n4. **Detail Elicitation through Questions**: This principle involves eliciting specific details by asking clarifying questions. This ensures that all necessary information is gathered before providing a solution, leading to more precise and tailored outputs.\n\n5. **Using Incentives**: Mentioning a tip as an incentive for a better solution can motivate the recipient to put in extra effort into providing a high-quality response. This principle can be used to encourage meticulous and thoughtful answers.",
    "step2": "Here is the prompt created using the above principles:\n\n{ \"prompt\": \"Please reduce the cognitive complexity of the following code: {TEXT}. Simplify the code as if you're explaining it to a beginner in programming. In the process, ensure to use affirmative directives. Before you provide the final solution, ask me any specific questions to clarify details you might need. Additionally, I'll tip you $50 for an exceptional solution!\" }"
}
Error: 
Response: {
    "step1": "Here is the analysis and explanation for each of the 26 prompting principles:\n\n1. Assign a role to the LLM: This principle involves specifying a role for the model to play, which can help in narrowing down the context and expectations.\n2. Implement example-driven prompting (Use few-shot prompting): Providing examples to the model to guide its responses.\n3. Combine Chain-of-thought (CoT) with few-shot prompts: Encourages the model to generate a step-by-step reasoning process while using examples.\n4. Use specific phrases for inquiry and testing understanding: Helps to clarify the user's learning process and allows for interactive checks.\n5. Incorporate directive phrases: 'Your task is' and 'You MUST' provide clear instructions to the model.\n6. Be explicit about the format of the output: Define how the response should look.\n7. Use clear and concise language: Ensure that the prompt is easy to understand.\n8. Focus on the end goal: Keep the desired outcome in mind when crafting the prompt.\n9. Ask for intermediate steps: Encourage the model to break down its reasoning.\n10. Use open-ended questions: Allow the model to explore the topic thoroughly.\n11. Encourage elaboration: Request detailed explanations when needed.\n12. Request comparisons: Ask the model to compare concepts to deepen understanding.\n13. Use analogies: Help the model draw parallels to explain complex ideas.\n14. Request summaries: Ask the model to summarize information to test comprehension.\n15. Ask for implications: Encourage the model to think about the consequences or implications of a fact or concept.\n16. Use hypothetical scenarios: Ask the model to apply concepts to hypothetical situations.\n17. Combine multiple concepts: Request the model to synthesize information from different areas.\n18. Ask for definitions: Request clear definitions of key terms.\n19. Request examples and counterexamples: Help clarify concepts by providing contrasting examples.\n20. Use multiple-choice questions: Test specific knowledge with structured options.\n21. Request paraphrasing: Check understanding by asking the model to rephrase information.\n22. Use role-playing scenarios: Place the model in a specific role to explore concepts.\n23. Ask for problem-solving: Pose problems and ask the model to solve them step-by-step.\n24. Request predictions: Ask the model to predict outcomes based on given information.\n25. Use the Socratic method: Engage in a question-and-answer dialogue to probe the model's understanding.\n26. End with a reflective question: Encourage the model to reflect on what has been discussed or learned.",
    "step2": "Your task is to reduce the cognitive complexity of the following code. You MUST analyze the code step-by-step, explaining what each part does, and then provide a simplified version of the code that maintains the same functionality but is easier to understand. Here are some examples to guide you:\n\nExample 1:\nInput Code: {TEXT}\nStep-by-step Analysis:...\nSimplified Code:...\n\nExample 2:\nInput Code: {TEXT}\nStep-by-step Analysis:...\nSimplified Code:...\n\nRemember to explain each part clearly and concisely, breaking down complex statements into more manageable pieces. You must also ensure that the simplified code is efficient and maintainable."
}
Error: '\n    "prompt"'
Response: {
    "step1": "Here is the analysis and explanation for each of the 26 prompting principles:\n\n1. When you have a complex coding prompt that may be in different files: This principle suggests generating a script to automate file creation or modification when dealing with multi-file code generation.\n\n2. To inquire about a specific topic or idea or any information and you want to test your understanding: This principle involves teaching a topic and including a test without providing answers, then verifying the user's response.\n\n3. Combine Chain-of-thought (CoT) with few-Shot prompts: This principle involves using a step-by-step reasoning process combined with examples to improve the quality of the response.\n\n4. When you want to initiate or continue a text using specific words, phrases, or sentences: This principle is about continuing a given text while maintaining consistency with the provided words or phrases.\n\n5. No need to be polite with LLM: This principle suggests being direct and to the point without using polite phrases.\n\n6. Use specific and clear instructions: Ensure that the prompt is unambiguous and easy to understand.\n\n7. Provide context: Give enough background information to make the task clear.\n\n8. Use examples: Provide examples to illustrate what is expected.\n\n9. Be concise: Keep the prompt as short as possible while still being clear.\n\n10. Use bullet points or numbered lists: Organize information in a way that is easy to follow.\n\n11. Specify the format of the response: Clearly state how the response should be structured.\n\n12. Use delimiters: Use delimiters to clearly separate different parts of the prompt.\n\n13. Ask for step-by-step solutions: Encourage a detailed, step-by-step approach to solving problems.\n\n14. Use placeholders: Use placeholders for variables that need to be replaced with specific values.\n\n15. Provide constraints: Specify any constraints or limitations that should be considered.\n\n16. Use active voice: Write in an active voice to make the prompt more engaging.\n\n17. Avoid ambiguity: Ensure that the prompt cannot be interpreted in multiple ways.\n\n18. Use simple language: Avoid complex vocabulary and jargon.\n\n19. Be specific about the output: Clearly state what the output should look like.\n\n20. Use positive language: Frame the prompt in a positive way to encourage a constructive response.\n\n21. Provide a clear goal: State the objective of the task clearly.\n\n22. Use consistent terminology: Use the same terms consistently throughout the prompt.\n\n23. Avoid unnecessary information: Exclude any information that is not relevant to the task.\n\n24. Use logical structure: Organize the prompt in a logical order.\n\n25. Encourage creativity: Allow for creative solutions where appropriate.\n\n26. Test the prompt: Ensure that the prompt works as intended by testing it.\n",
    "step2": "Here is the prompt created using the 26 prompting principles:\n\n{\n    \"prompt\": \"Reduce the cognitive complexity of the following code: {TEXT}. Provide a step-by-step explanation of the changes you made and why they reduce complexity. Ensure the response is clear, concise, and uses simple language.\"\n}"
}
Error: '\n  "prompt"'
Response: {
    "step1": "Here is the analysis and explanation for each of the 26 prompting principles:\n\n1. To inquire about a specific topic or idea or any information and you want to test your understanding, you can use the following phrase: \"Teach me the [Any theorem/topic/rule name] and include a test at the end, but don't give me the answers and then tell me if I got the answer right when I respond\".\n   - This principle is useful for learning and self-assessment. It encourages active engagement with the material.\n\n2. Clearly state the requirements that the model must follow in order to produce content, in the form of the keywords, regulations, hint, or instructions.\n   - This principle ensures that the output is tailored to specific needs and constraints, making it more relevant and useful.\n\n3. When you need clarity or a deeper understanding of a topic, idea, or any piece of information, utilize the following prompts:\n   - Explain [insert specific topic] in simple terms.\n   - Explain to me like I'm 11 years old.\n   - Explain to me as if I'm a beginner in [field].\n   - Write the [essay/text/paragraph] using simple English like you're explaining something to a 5-year-old.\n   - These prompts are designed to simplify complex information, making it accessible to different levels of understanding.\n\n4. When you have a complex coding prompt that may be in different files: \"From now and on whenever you generate code that spans more than one file, generate a [programming language ] script that can be run to automatically create the specified files or make changes to existing files to insert the generated code. [your question]\".\n   - This principle is useful for managing multi-file coding tasks, ensuring that the generated code is organized and easy to implement.\n\n5. Add to your prompt the following phrase \"Ensure that your answer is unbiased and does not rely on stereotypes\".\n   - This principle promotes fairness and accuracy in the generated content, avoiding harmful biases and stereotypes.\n\n6. Use specific and clear language to avoid ambiguity.\n   - Clear language helps in getting precise and relevant responses.\n\n7. Provide context or background information if necessary.\n   - Context helps the model understand the situation better and provide more accurate responses.\n\n8. Ask for examples if you need them.\n   - Examples can clarify how a concept is applied in practice.\n\n9. Specify the format of the response if needed.\n   - Specifying the format ensures the response is in a usable form.\n\n10. Use step-by-step instructions for complex tasks.\n   - Step-by-step instructions break down complex tasks into manageable parts.\n\n11. Request summaries for long explanations.\n   - Summaries provide a quick overview of the main points.\n\n12. Ask for comparisons to understand differences and similarities.\n   - Comparisons can highlight key distinctions and commonalities.\n\n13. Use analogies to explain abstract concepts.\n   - Analogies make abstract concepts more relatable and easier to understand.\n\n14. Request visual aids if applicable.\n   - Visual aids can enhance understanding, especially for visual learners.\n\n15. Ask for pros and cons to evaluate options.\n   - Pros and cons help in making informed decisions.\n\n16. Request a list of steps or a process for procedural tasks.\n   - Lists or processes provide a clear sequence of actions to follow.\n\n17. Ask for potential pitfalls or common mistakes to avoid.\n   - Knowing pitfalls helps in avoiding common errors.\n\n18. Request alternative approaches or solutions.\n   - Alternative approaches provide different ways to tackle a problem.\n\n19. Ask for historical context if relevant.\n   - Historical context can provide background and deeper understanding.\n\n20. Request future implications or trends.\n   - Future implications help in understanding the long-term impact.\n\n21. Ask for ethical considerations if applicable.\n   - Ethical considerations ensure that actions are morally sound.\n\n22. Request a glossary for technical terms.\n   - A glossary helps in understanding specialized vocabulary.\n\n23. Ask for a critique or evaluation of an idea or work.\n   - Critiques provide constructive feedback for improvement.\n\n24. Request a hypothetical scenario to explore possibilities.\n   - Hypothetical scenarios can help in exploring different outcomes.\n\n25. Ask for a detailed explanation of a process or mechanism.\n   - Detailed explanations provide in-depth understanding.\n\n26. Request a summary of key takeaways.\n   - Key takeaways highlight the most important points to remember.",
    "step2": "Here is the prompt created using the 26 prompting principles:\n\n{\n  \"prompt\": \"Reduce the cognitive complexity of the following code {TEXT}. Ensure that your answer is unbiased and does not rely on stereotypes. Provide a step-by-step explanation of the changes you made to reduce complexity. Include examples if necessary and summarize the key takeaways at the end.\"\n}"
}
['Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.']
['Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.']
['Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.']
['Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.']
['Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.']
['Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.']
['Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.']
['Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.']
['Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.']
['Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.']
['Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.']
['Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'No', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.']
['Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.']
['Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.']
['Yes.', 'Yes.', 'No.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'No.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.']
['Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.']
Max score reached. Exiting...
Current Best score: 100.0
Current Best prompt: Reduce the cognitive compleity of the following code{TEXT}


Calculating Test Scores...
['Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.']
Rate Limit Error: on endpoint https://gsl-azoai-1.openai.azure.com/
Error code: 429 - {'error': {'code': '429', 'message': 'Rate limit is exceeded. Try again in 13 seconds.'}}
Rate Limit Error: on endpoint https://gsl-azoai-2.openai.azure.com/
Error code: 429 - {'error': {'code': '429', 'message': 'Rate limit is exceeded. Try again in 13 seconds.'}}
Rate Limit Error: on endpoint https://gsl-azoai-3.openai.azure.com/
Error code: 429 - {'error': {'code': '429', 'message': 'Rate limit is exceeded. Try again in 13 seconds.'}}
Rate Limit Error: on endpoint https://gsl-azoai-4.openai.azure.com/
Error code: 429 - {'error': {'code': '429', 'message': 'Rate limit is exceeded. Try again in 13 seconds.'}}
['Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.', 'Yes.']
Printing Test Scores:
Initial Prompt Score: {'Reduce the cognitive compleity of the following code{TEXT}': 100.0}
Optimized Prompt Score: {'Reduce the cognitive compleity of the following code{TEXT}': 100.0}
